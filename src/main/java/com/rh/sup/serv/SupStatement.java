package com.rh.sup.serv;

import com.rh.core.base.Bean;
import com.rh.core.base.Context;
import com.rh.core.base.db.Transaction;
import com.rh.core.serv.CommonServ;
import com.rh.core.serv.OutBean;
import com.rh.core.serv.ParamBean;
import com.rh.sup.util.FromDbToExcel;
import org.apache.commons.lang.StringUtils;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;

public class SupStatement extends CommonServ {

    String begintime = "" ;
    String endtime = "" ;
    String selecttime = "" ;

    //表一署內sql
    //根据需求统计指定条件下的立项个数，根据不同条件对sql进行不同的拼接
    private static String[] str1_one = {"SELECT DISTINCT t4.DEPT_CODE,t4.DEPT_NAME,\n" +
            "\t(SELECT COUNT(*)\tFROM SUP_APPRO_OFFICE t3\n" +
            "   WHERE (t3.DEALT_TIME <= t3.LIMIT_DATE OR LIMIT_DATE = '') AND APPLY_STATE = '7' AND t3.ID \n" +
            "     IN (SELECT DISTINCT OFFICE_ID FROM SUP_APPRO_OFFICE_DEPT WHERE DEPT_CODE = t4.DEPT_CODE AND DEPT_TYPE = '1') \n" +
            "     AND APPR_DATE BETWEEN '","' AND '","') AS ON_TIME_FINISHED,\n" +
            "   (SELECT COUNT(*)\tFROM SUP_APPRO_OFFICE t3\n" +
            "   WHERE t3.DEALT_TIME > t3.LIMIT_DATE AND LIMIT_DATE != ''AND APPLY_STATE = '7' AND t3.ID \n" +
            "\t IN (SELECT DISTINCT OFFICE_ID FROM SUP_APPRO_OFFICE_DEPT WHERE DEPT_CODE = t4.DEPT_CODE AND DEPT_TYPE = '1') \n" +
            "\t AND APPR_DATE BETWEEN '","' AND '","') AS OVER_TIME_FINISHED,\n" +
            "\t(SELECT COUNT(*)\tFROM SUP_APPRO_OFFICE t3\n" +
            "   WHERE TO_CHAR(SYSDATE) < t3.LIMIT_DATE AND LIMIT_DATE != '' AND t3.S_WF_STATE = '1' AND t3.APPLY_STATE != '7' AND t3.ID \n" +
            "\t IN (SELECT DISTINCT OFFICE_ID FROM SUP_APPRO_OFFICE_DEPT WHERE DEPT_CODE = t4.DEPT_CODE AND DEPT_TYPE = '1') \n" +
            "\t AND APPR_DATE BETWEEN '","' AND '","') AS NOT_ACCOMPLISH_TIME,\n" +
            "\t(SELECT COUNT(*)\tFROM SUP_APPRO_OFFICE t3\n" +
            "   WHERE LIMIT_DATE != '' AND TO_CHAR(SYSDATE) >= t3.LIMIT_DATE AND t3.S_WF_STATE = '1' AND t3.APPLY_STATE != '7' AND t3.ID \n" +
            "\t IN (SELECT DISTINCT OFFICE_ID FROM SUP_APPRO_OFFICE_DEPT WHERE DEPT_CODE = t4.DEPT_CODE AND DEPT_TYPE = '1') \n" +
            "\t AND APPR_DATE BETWEEN '","' AND '","') AS OVERDUE_NOT_STTLEMENT,\n" +
            "\t(SELECT COUNT(*)\tFROM SUP_APPRO_OFFICE t3\n" +
            "   WHERE LIMIT_DATE = '' AND t3.S_WF_STATE = '1' AND t3.APPLY_STATE != '7' AND t3.ID \n" +
            "\t IN (SELECT DISTINCT OFFICE_ID FROM SUP_APPRO_OFFICE_DEPT WHERE DEPT_CODE = t4.DEPT_CODE AND DEPT_TYPE = '1') \n" +
            "\t AND APPR_DATE BETWEEN '","' AND '","') AS NOT_UNEQUIVOCAL_DATETIME\n" +
            "FROM SUP_APPRO_OFFICE_DEPT t2,SY_ORG_DEPT t4\n" +
            "WHERE t2.DEPT_TYPE = '1' AND t2.DEPT_CODE = t4.DEPT_CODE AND t4.DEPT_LEVEL = '3' ", " AND t2.DEPT_CODE = '", "'\n",
            "GROUP BY t4.DEPT_CODE,t4.DEPT_NAME,ON_TIME_FINISHED,OVER_TIME_FINISHED,NOT_ACCOMPLISH_TIME,OVERDUE_NOT_STTLEMENT,NOT_UNEQUIVOCAL_DATETIME\n" +
            "ORDER BY t4.DEPT_CODE"};
    //表一司內sql
    //根据需求统计指定条件下的立项个数，根据不同条件对sql进行不同的拼接
    private static String[] str1_two = {"SELECT DISTINCT t4.DEPT_CODE,t4.DEPT_NAME,\n" +
            "\t(SELECT COUNT(*)\tFROM SUP_APPRO_BUREAU t3\n" +
            "   WHERE (t3.DEALT_TIME <= t3.LIMIT_DATE OR LIMIT_DATE = '') AND APPLY_STATE = '7' AND t3.ID \n" +
            "     IN (SELECT DISTINCT BUREAU_ID FROM SUP_APPRO_BUREAU_STAFF WHERE DEPT_CODE = t4.DEPT_CODE AND DEPT_TYPE = '1') \n" +
            "     AND APPR_DATE BETWEEN '","' AND '","') AS ON_TIME_FINISHED,\n" +
            "   (SELECT COUNT(*)\tFROM SUP_APPRO_BUREAU t3\n" +
            "   WHERE t3.DEALT_TIME > t3.LIMIT_DATE AND LIMIT_DATE != '' AND APPLY_STATE = '7' AND t3.ID \n" +
            "\t IN (SELECT DISTINCT BUREAU_ID FROM SUP_APPRO_BUREAU_STAFF WHERE DEPT_CODE = t4.DEPT_CODE AND DEPT_TYPE = '1') \n" +
            "\t AND APPR_DATE BETWEEN '","' AND '","') AS OVER_TIME_FINISHED,\n" +
            "\t(SELECT COUNT(*)\tFROM SUP_APPRO_BUREAU t3\n" +
            "   WHERE TO_CHAR(SYSDATE) < t3.LIMIT_DATE AND LIMIT_DATE != '' AND t3.S_WF_STATE = '1' AND t3.APPLY_STATE != '7' AND t3.ID \n" +
            "\t IN (SELECT DISTINCT BUREAU_ID FROM SUP_APPRO_BUREAU_STAFF WHERE DEPT_CODE = t4.DEPT_CODE AND DEPT_TYPE = '1') \n" +
            "\t AND APPR_DATE BETWEEN '","' AND '","') AS NOT_ACCOMPLISH_TIME,\n" +
            "\t(SELECT COUNT(*)\tFROM SUP_APPRO_BUREAU t3\n" +
            "   WHERE LIMIT_DATE != '' AND TO_CHAR(SYSDATE) >= t3.LIMIT_DATE AND t3.S_WF_STATE = '1' AND t3.APPLY_STATE != '7' AND t3.ID \n" +
            "\t IN (SELECT DISTINCT BUREAU_ID FROM SUP_APPRO_BUREAU_STAFF WHERE DEPT_CODE = t4.DEPT_CODE AND DEPT_TYPE = '1') \n" +
            "\t AND APPR_DATE BETWEEN '","' AND '","') AS OVERDUE_NOT_STTLEMENT,\n" +
            "\t(SELECT COUNT(*)\tFROM SUP_APPRO_BUREAU t3\n" +
            "   WHERE LIMIT_DATE = '' AND t3.S_WF_STATE = '1' AND t3.APPLY_STATE != '7' AND t3.ID \n" +
            "\t IN (SELECT DISTINCT BUREAU_ID FROM SUP_APPRO_BUREAU_STAFF WHERE DEPT_CODE = t4.DEPT_CODE AND DEPT_TYPE = '1') \n" +
            "\t AND APPR_DATE BETWEEN '","' AND '","') AS NOT_UNEQUIVOCAL_DATETIME\n" +
            "FROM SUP_APPRO_BUREAU_STAFF t2,SY_ORG_DEPT t4\n" +
            "WHERE t2.DEPT_TYPE = '1' AND t2.DEPT_CODE = t4.DEPT_CODE AND t4.DEPT_LEVEL = '4'\n"," AND t2.DEPT_CODE = '", "'\n",
            "GROUP BY t4.DEPT_CODE,t4.DEPT_NAME,ON_TIME_FINISHED,OVER_TIME_FINISHED,NOT_ACCOMPLISH_TIME,OVERDUE_NOT_STTLEMENT,NOT_UNEQUIVOCAL_DATETIME\n" +
            "ORDER BY t4.DEPT_CODE"};
    //表二署內
    //根据需求统计指定条件下的立项个数，根据不同条件对sql进行不同的拼接
    private static String[] str2_one = {"SELECT DISTINCT t5.DEPT_CODE,t2.DEPT_NAME,t4.DICT_NAME,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_OFFICE t3\n" +
            "WHERE t3.DEALT_TIME != '' AND t3.S_ATIME < '","' AND t3.DEALT_TIME > '","' AND t3.ID\n" +
            "IN (SELECT DISTINCT OFFICE_ID FROM SUP_APPRO_OFFICE_DEPT WHERE DEPT_CODE = t5.DEPT_CODE AND DEPT_TYPE = '1')\n" +
            "AND t3.ID IN (SELECT APPRO_ID FROM SUP_APPRO_PLAN WHERE RES_STEP = t4.ID )\n" +
            "AND t3.S_ATIME < '","' AND t3.DEALT_TIME > '","') AS YQJZ ,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_OFFICE t3\n" +
            "WHERE t3.DEALT_TIME != '' AND t3.S_ATIME < '","' AND t3.DEALT_TIME > '","' AND t3.ID\n" +
            "IN (SELECT DISTINCT OFFICE_ID FROM SUP_APPRO_OFFICE_DEPT WHERE DEPT_CODE=t5.DEPT_CODE AND DEPT_TYPE = '1')\n" +
            "AND t3.ID IN (SELECT APPRO_ID FROM SUP_APPRO_PLAN WHERE RES_STEP = t4.ID )\n" +
            "AND t3.S_ATIME > '","' AND t3.APPR_DATE < '","')  AS BNXZ ,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_OFFICE t3 WHERE APPR_DATE BETWEEN '","' AND '","' AND t3.ID IN \n" +
            "(SELECT DISTINCT OFFICE_ID FROM SUP_APPRO_OFFICE_DEPT WHERE DEPT_CODE=t5.DEPT_CODE AND DEPT_TYPE = '1')\n" +
            "AND t3.ID IN (SELECT APPRO_ID FROM SUP_APPRO_PLAN WHERE RES_STEP = t4.ID ))  AS XZ ,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_OFFICE t3\n" +
            "WHERE (t3.DEALT_TIME <= t3.LIMIT_DATE OR LIMIT_DATE = '') AND APPLY_STATE = '7' AND t3.ID\n" +
            "IN (SELECT DISTINCT OFFICE_ID FROM SUP_APPRO_OFFICE_DEPT WHERE DEPT_CODE = t5.DEPT_CODE AND DEPT_TYPE = '1')\n" +
            "AND t3.ID IN (SELECT APPRO_ID FROM SUP_APPRO_PLAN WHERE RES_STEP = t4.ID )\n" +
            "AND t3.APPR_DATE BETWEEN '","' AND '","') AS ON_TIME_FINISHED,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_OFFICE t3\n" +
            "WHERE t3.DEALT_TIME > t3.LIMIT_DATE AND t3.LIMIT_DATE = '' AND APPLY_STATE = '7' AND t3.ID\n" +
            "IN (SELECT DISTINCT OFFICE_ID FROM SUP_APPRO_OFFICE_DEPT WHERE DEPT_CODE = t5.DEPT_CODE AND DEPT_TYPE = '1')\n" +
            "AND t3.ID IN (SELECT APPRO_ID FROM SUP_APPRO_PLAN WHERE RES_STEP = t4.ID )\n" +
            "AND t3.APPR_DATE BETWEEN '","' AND '","') AS OVER_TIME_FINISHED,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_OFFICE t3\n" +
            "WHERE TO_CHAR(SYSDATE) < t3.LIMIT_DATE AND LIMIT_DATE != '' AND t3.S_WF_STATE = '1' AND t3.APPLY_STATE != '7' AND t3.ID\n" +
            "IN (SELECT DISTINCT OFFICE_ID FROM SUP_APPRO_OFFICE_DEPT WHERE DEPT_CODE = t5.DEPT_CODE AND DEPT_TYPE = '1')\n" +
            "AND t3.ID IN (SELECT APPRO_ID FROM SUP_APPRO_PLAN WHERE RES_STEP = t4.ID )\n" +
            "AND t3.APPR_DATE BETWEEN '","' AND '","') AS NOT_ACCOMPLISH_TIME,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_OFFICE t3\n" +
            "WHERE LIMIT_DATE != '' AND TO_CHAR(SYSDATE) >= t3.LIMIT_DATE AND t3.S_WF_STATE = '1' AND t3.APPLY_STATE != '7' AND t3.ID\n" +
            "IN (SELECT DISTINCT OFFICE_ID FROM SUP_APPRO_OFFICE_DEPT WHERE DEPT_CODE = t5.DEPT_CODE AND DEPT_TYPE = '1')\n" +
            "AND t3.ID IN (SELECT APPRO_ID FROM SUP_APPRO_PLAN WHERE RES_STEP = t4.ID )\n" +
            "AND t3.APPR_DATE BETWEEN '","' AND '","') AS OVERDUE_NOT_STTLEMENT,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_OFFICE t3\n" +
            "WHERE LIMIT_DATE = '' AND t3.S_WF_STATE = '1' AND t3.APPLY_STATE != '7' AND t3.ID\n" +
            "IN (SELECT DISTINCT OFFICE_ID FROM SUP_APPRO_OFFICE_DEPT WHERE DEPT_CODE = t5.DEPT_CODE AND DEPT_TYPE = '1')\n" +
            "AND t3.ID IN (SELECT APPRO_ID FROM SUP_APPRO_PLAN WHERE RES_STEP = t4.ID )\n" +
            "AND t3.APPR_DATE BETWEEN '","' AND '","') AS NOT_UNEQUIVOCAL_DATETIME\n" +
            "FROM SUP_APPRO_PLAN t1,SY_ORG_DEPT t2,SUP_SERV_DICT t4,SUP_APPRO_OFFICE_DEPT t5\n" +
            "WHERE t1.RES_STEP = t4.ID AND t2.DEPT_LEVEL = '3' AND t1.APPRO_ID = t5.OFFICE_ID AND t5.DEPT_CODE = t2.DEPT_CODE AND t5.DEPT_TYPE = '1' \n" ,
            "AND t5.DEPT_CODE = '", "'\n",
            "GROUP BY t5.DEPT_CODE,t2.DEPT_NAME,t4.DICT_NAME,YQJZ,BNXZ,XZ,ON_TIME_FINISHED,OVER_TIME_FINISHED,NOT_ACCOMPLISH_TIME," +
            "OVERDUE_NOT_STTLEMENT,NOT_UNEQUIVOCAL_DATETIME\n" +
            "ORDER BY t5.DEPT_CODE"};
    //表二司内
    //根据需求统计指定条件下的立项个数，根据不同条件对sql进行不同的拼接
    private static String[] str2_two = {"SELECT DISTINCT t5.DEPT_CODE,t2.DEPT_NAME,t4.DICT_NAME,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_BUREAU t3\n" +
            "WHERE t3.DEALT_TIME != '' AND t3.S_ATIME < '","' AND t3.DEALT_TIME > '","' AND t3.ID\n" +
            "IN (SELECT DISTINCT BUREAU_ID FROM SUP_APPRO_BUREAU_STAFF WHERE DEPT_CODE = t5.DEPT_CODE AND DEPT_TYPE = '1')\n" +
            "AND t3.ID IN (SELECT APPRO_ID FROM SUP_APPRO_PLAN WHERE RES_STEP = t4.ID )\n" +
            "AND t3.S_ATIME < '","' AND t3.DEALT_TIME > '","') AS YQJZ ,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_BUREAU t3\n" +
            "WHERE t3.DEALT_TIME != '' AND t3.S_ATIME < '","' AND t3.DEALT_TIME > '","' AND t3.ID\n" +
            "IN (SELECT DISTINCT BUREAU_ID FROM SUP_APPRO_BUREAU_STAFF WHERE DEPT_CODE=t5.DEPT_CODE AND DEPT_TYPE = '1')\n" +
            "AND t3.ID IN (SELECT APPRO_ID FROM SUP_APPRO_PLAN WHERE RES_STEP = t4.ID )\n" +
            "AND t3.S_ATIME > '","' AND t3.APPR_DATE < '","')  AS BNXZ ,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_OFFICE t3 WHERE APPR_DATE BETWEEN '","' AND '","' AND t3.ID IN \n" +
            "(SELECT DISTINCT BUREAU_ID FROM SUP_APPRO_BUREAU_STAFF WHERE DEPT_CODE=t5.DEPT_CODE AND DEPT_TYPE = '1')\n" +
            "AND t3.ID IN (SELECT APPRO_ID FROM SUP_APPRO_PLAN WHERE RES_STEP = t4.ID ))  AS XZ ,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_BUREAU t3\n" +
            "WHERE (t3.DEALT_TIME <= t3.LIMIT_DATE OR LIMIT_DATE = '') AND APPLY_STATE = '7' AND t3.ID\n" +
            "IN (SELECT DISTINCT BUREAU_ID FROM SUP_APPRO_BUREAU_STAFF WHERE DEPT_CODE = t5.DEPT_CODE AND DEPT_TYPE = '1')\n" +
            "AND t3.ID IN (SELECT APPRO_ID FROM SUP_APPRO_PLAN WHERE RES_STEP = t4.ID )\n" +
            "AND t3.APPR_DATE BETWEEN '","' AND '","') AS ON_TIME_FINISHED,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_BUREAU t3\n" +
            "WHERE t3.DEALT_TIME > t3.LIMIT_DATE AND t3.LIMIT_DATE != '' AND APPLY_STATE = '7' AND t3.ID\n" +
            "IN (SELECT DISTINCT BUREAU_ID FROM SUP_APPRO_BUREAU_STAFF WHERE DEPT_CODE = t5.DEPT_CODE AND DEPT_TYPE = '1')\n" +
            "AND t3.ID IN (SELECT APPRO_ID FROM SUP_APPRO_PLAN WHERE RES_STEP = t4.ID )\n" +
            "AND t3.APPR_DATE BETWEEN '","' AND '","') AS OVER_TIME_FINISHED,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_BUREAU t3\n" +
            "WHERE TO_CHAR(SYSDATE) < t3.LIMIT_DATE AND LIMIT_DATE != '' AND t3.S_WF_STATE = '1' AND t3.APPLY_STATE != '7' AND t3.ID\n" +
            "IN (SELECT DISTINCT BUREAU_ID FROM SUP_APPRO_BUREAU_STAFF WHERE DEPT_CODE = t5.DEPT_CODE AND DEPT_TYPE = '1')\n" +
            "AND t3.ID IN (SELECT APPRO_ID FROM SUP_APPRO_PLAN WHERE RES_STEP = t4.ID )\n" +
            "AND t3.APPR_DATE BETWEEN '","' AND '","') AS NOT_ACCOMPLISH_TIME,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_BUREAU t3\n" +
            "WHERE LIMIT_DATE != '' AND TO_CHAR(SYSDATE) >= t3.LIMIT_DATE AND t3.S_WF_STATE = '1' AND t3.APPLY_STATE != '7' AND t3.ID\n" +
            "IN (SELECT DISTINCT BUREAU_ID FROM SUP_APPRO_BUREAU_STAFF WHERE DEPT_CODE = t5.DEPT_CODE AND DEPT_TYPE = '1')\n" +
            "AND t3.ID IN (SELECT APPRO_ID FROM SUP_APPRO_PLAN WHERE RES_STEP = t4.ID )\n" +
            "AND t3.APPR_DATE BETWEEN '","' AND '","') AS OVERDUE_NOT_STTLEMENT,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_BUREAU t3\n" +
            "WHERE LIMIT_DATE = '' AND t3.S_WF_STATE = '1' AND t3.APPLY_STATE != '7' AND t3.ID\n" +
            "IN (SELECT DISTINCT BUREAU_ID FROM SUP_APPRO_BUREAU_STAFF WHERE DEPT_CODE = t5.DEPT_CODE AND DEPT_TYPE = '1')\n" +
            "AND t3.ID IN (SELECT APPRO_ID FROM SUP_APPRO_PLAN WHERE RES_STEP = t4.ID )\n" +
            "AND t3.APPR_DATE BETWEEN '","' AND '","') AS NOT_UNEQUIVOCAL_DATETIME\n" +
            "FROM SUP_APPRO_PLAN t1,SY_ORG_DEPT t2,SUP_SERV_DICT t4,SUP_APPRO_BUREAU_STAFF t5\n" +
            "WHERE t1.RES_STEP = t4.ID AND t2.DEPT_LEVEL = '4' AND t1.APPRO_ID = t5.BUREAU_ID AND t5.DEPT_CODE = t2.DEPT_CODE AND t5.DEPT_TYPE = '1'\n",
            "AND t5.DEPT_CODE = '", "'\n" ,
            "GROUP BY t5.DEPT_CODE,t2.DEPT_NAME,t4.DICT_NAME,YQJZ,BNXZ,XZ,ON_TIME_FINISHED,OVER_TIME_FINISHED,NOT_ACCOMPLISH_TIME,\n" +
            "OVERDUE_NOT_STTLEMENT,NOT_UNEQUIVOCAL_DATETIME\n"+
            "ORDER BY t5.DEPT_CODE"};
    //表三署內
    //根据需求统计指定条件下的立项个数，根据不同条件对sql进行不同的拼接
    private static String[] str3_one = {"SELECT DISTINCT t2.ID,t2.DICT_NAME,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_OFFICE t3\n" +
            "WHERE t3.DEALT_TIME != '' AND t3.S_ATIME < '","' AND t3.DEALT_TIME > '","' AND t3.ID\n" +
            "IN (SELECT DISTINCT OFFICE_ID FROM SUP_APPRO_OFFICE_DEPT WHERE "," DEPT_TYPE = '1')\n" +
            "AND t3.S_ATIME < '","' AND t3.DEALT_TIME > '","' AND t3.STATIS_ITEM_SOURCE = t2.ID ) AS YQJZ ,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_OFFICE t3\n" +
            "WHERE t3.DEALT_TIME != '' AND t3.S_ATIME < '","' AND t3.DEALT_TIME > '","' AND t3.ID\n" +
            "IN (SELECT DISTINCT OFFICE_ID FROM SUP_APPRO_OFFICE_DEPT WHERE "," DEPT_TYPE = '1')\n" +
            "AND t3.S_ATIME > '","' AND t3.APPR_DATE < '","' AND t3.STATIS_ITEM_SOURCE = t2.ID )  AS BNXZ ,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_OFFICE t3 WHERE APPR_DATE BETWEEN '","' AND '","' AND t3.STATIS_ITEM_SOURCE = t2.ID " +
            "AND t3.ID IN (SELECT DISTINCT OFFICE_ID FROM SUP_APPRO_OFFICE_DEPT WHERE "," DEPT_TYPE = '1'))  AS XZ ,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_OFFICE t3\n" +
            "WHERE (t3.DEALT_TIME <= t3.LIMIT_DATE OR LIMIT_DATE = '') AND APPLY_STATE = '7' AND t3.ID\n" +
            "IN (SELECT DISTINCT OFFICE_ID FROM SUP_APPRO_OFFICE_DEPT WHERE "," DEPT_TYPE = '1')\n" +
            "AND t3.APPR_DATE BETWEEN '","' AND '","' AND t3.STATIS_ITEM_SOURCE = t2.ID ) AS ON_TIME_FINISHED,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_OFFICE t3\n" +
            "WHERE t3.DEALT_TIME > t3.LIMIT_DATE AND t3.LIMIT_DATE != '' AND APPLY_STATE = '7' AND t3.ID\n" +
            "IN (SELECT DISTINCT OFFICE_ID FROM SUP_APPRO_OFFICE_DEPT WHERE "," DEPT_TYPE = '1')\n" +
            "AND t3.APPR_DATE BETWEEN '","' AND '","' AND t3.STATIS_ITEM_SOURCE = t2.ID ) AS OVER_TIME_FINISHED,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_OFFICE t3\n" +
            "WHERE TO_CHAR(SYSDATE) < t3.LIMIT_DATE AND LIMIT_DATE != '' AND t3.S_WF_STATE = '1' AND t3.APPLY_STATE != '7' AND t3.ID\n" +
            "IN (SELECT DISTINCT OFFICE_ID FROM SUP_APPRO_OFFICE_DEPT WHERE "," DEPT_TYPE = '1')\n" +
            "AND t3.APPR_DATE BETWEEN '","' AND '","' AND t3.STATIS_ITEM_SOURCE = t2.ID ) AS NOT_ACCOMPLISH_TIME,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_OFFICE t3\n" +
            "WHERE LIMIT_DATE != '' AND TO_CHAR(SYSDATE) >= t3.LIMIT_DATE AND t3.S_WF_STATE = '1' AND t3.APPLY_STATE != '7' AND t3.ID\n" +
            "IN (SELECT DISTINCT OFFICE_ID FROM SUP_APPRO_OFFICE_DEPT WHERE "," DEPT_TYPE = '1')\n" +
            "AND t3.APPR_DATE BETWEEN '","' AND '","' AND t3.STATIS_ITEM_SOURCE = t2.ID ) AS OVERDUE_NOT_STTLEMENT,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_OFFICE t3 WHERE LIMIT_DATE = '' AND t3.S_WF_STATE = '1' AND t3.APPLY_STATE != '7' AND t3.ID\n" +
            "IN (SELECT DISTINCT OFFICE_ID FROM SUP_APPRO_OFFICE_DEPT WHERE "," DEPT_TYPE = '1')\n" +
            "AND t3.APPR_DATE BETWEEN '","' AND '","' AND t3.STATIS_ITEM_SOURCE = t2.ID ) AS NOT_UNEQUIVOCAL_DATETIME\n" +
            "FROM SUP_APPRO_OFFICE t1,SUP_SERV_DICT t2\n" +
            "WHERE t2.ID = t1.STATIS_ITEM_SOURCE AND\n" +
            "t1.ID IN (SELECT OFFICE_ID FROM SUP_APPRO_OFFICE_DEPT WHERE DEPT_TYPE = '1' ORDER BY DEPT_CODE )\n"+
            "GROUP BY t2.ID,t2.DICT_NAME,YQJZ,BNXZ,XZ,ON_TIME_FINISHED,OVER_TIME_FINISHED,NOT_ACCOMPLISH_TIME,\n" +
            "  OVERDUE_NOT_STTLEMENT,NOT_UNEQUIVOCAL_DATETIME\n"};
    //表三司内
    //根据需求统计指定条件下的立项个数，根据不同条件对sql进行不同的拼接
    private static String[] str3_two = {"SELECT DISTINCT t2.ID,t2.DICT_NAME,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_BUREAU t3\n" +
            "WHERE t3.DEALT_TIME != '' AND t3.S_ATIME < '","' AND t3.DEALT_TIME > '","' AND t3.ID\n" +
            "IN (SELECT DISTINCT BUREAU_ID FROM SUP_APPRO_BUREAU_STAFF WHERE "," DEPT_TYPE = '1')\n" +
            "AND t3.S_ATIME < '","' AND t3.DEALT_TIME > '","' AND t3.STATIS_ITEM_SOURCE = t2.ID ) AS YQJZ ,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_BUREAU t3\n" +
            "WHERE t3.DEALT_TIME != '' AND t3.S_ATIME < '","' AND t3.DEALT_TIME > '","' AND t3.ID\n" +
            "IN (SELECT DISTINCT BUREAU_ID FROM SUP_APPRO_BUREAU_STAFF WHERE "," DEPT_TYPE = '1')\n" +
            "AND t3.ID IN (SELECT APPRO_ID FROM SUP_APPRO_PLAN WHERE RES_STEP = t2.ID )\n" +
            "AND t3.S_ATIME > '","' AND t3.APPR_DATE < '","' AND t3.STATIS_ITEM_SOURCE = t2.ID )  AS BNXZ ,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_BUREAU t3 WHERE APPR_DATE BETWEEN '","' AND '","' AND t3.STATIS_ITEM_SOURCE = t2.ID " +
            "AND t3.ID IN (SELECT DISTINCT BUREAU_ID FROM SUP_APPRO_BUREAU_STAFF WHERE "," DEPT_TYPE = '1'))  AS XZ ,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_BUREAU t3\n" +
            "WHERE (t3.DEALT_TIME <= t3.LIMIT_DATE OR LIMIT_DATE = '') AND APPLY_STATE = '7' AND t3.ID\n" +
            "IN (SELECT DISTINCT BUREAU_ID FROM SUP_APPRO_BUREAU_STAFF WHERE "," DEPT_TYPE = '1')\n" +
            "AND t3.APPR_DATE BETWEEN '","' AND '","' AND t3.STATIS_ITEM_SOURCE = t2.ID ) AS ON_TIME_FINISHED,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_BUREAU t3\n" +
            "WHERE t3.DEALT_TIME > t3.LIMIT_DATE AND t3.LIMIT_DATE != '' AND APPLY_STATE = '7' AND t3.ID\n" +
            "IN (SELECT DISTINCT BUREAU_ID FROM SUP_APPRO_BUREAU_STAFF WHERE "," DEPT_TYPE = '1')\n" +
            "AND t3.APPR_DATE BETWEEN '","' AND '","' AND t3.STATIS_ITEM_SOURCE = t2.ID ) AS OVER_TIME_FINISHED,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_BUREAU t3\n" +
            "WHERE TO_CHAR(SYSDATE) < t3.LIMIT_DATE AND LIMIT_DATE != '' AND t3.S_WF_STATE = '1' AND t3.APPLY_STATE != '7' AND t3.ID\n" +
            "IN (SELECT DISTINCT BUREAU_ID FROM SUP_APPRO_BUREAU_STAFF WHERE "," DEPT_TYPE = '1')\n" +
            "AND t3.APPR_DATE BETWEEN '","' AND '","' AND t3.STATIS_ITEM_SOURCE = t2.ID ) AS NOT_ACCOMPLISH_TIME,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_BUREAU t3\n" +
            "WHERE LIMIT_DATE != '' AND TO_CHAR(SYSDATE) >= t3.LIMIT_DATE AND t3.S_WF_STATE = '1' AND t3.APPLY_STATE != '7' AND t3.ID\n" +
            "IN (SELECT DISTINCT BUREAU_ID FROM SUP_APPRO_BUREAU_STAFF WHERE "," DEPT_TYPE = '1')\n" +
            "AND t3.APPR_DATE BETWEEN '","' AND '","' AND t3.STATIS_ITEM_SOURCE = t2.ID ) AS OVERDUE_NOT_STTLEMENT,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_BUREAU t3 WHERE LIMIT_DATE = '' AND t3.S_WF_STATE = '1' AND t3.APPLY_STATE != '7' AND t3.ID\n" +
            "IN (SELECT DISTINCT BUREAU_ID FROM SUP_APPRO_BUREAU_STAFF WHERE "," DEPT_TYPE = '1')\n" +
            "AND t3.APPR_DATE BETWEEN '","' AND '","' AND t3.STATIS_ITEM_SOURCE = t2.ID ) AS NOT_UNEQUIVOCAL_DATETIME\n" +
            "FROM SUP_APPRO_BUREAU t1,SUP_SERV_DICT t2\n" +
            "WHERE t2.ID = t1.STATIS_ITEM_SOURCE AND \n"+
            "t1.ID IN (SELECT BUREAU_ID FROM SUP_APPRO_BUREAU_STAFF WHERE DEPT_TYPE = '1' ORDER BY DEPT_CODE )\n"+
            "GROUP BY t2.ID,t2.DICT_NAME,YQJZ,BNXZ,XZ,ON_TIME_FINISHED,OVER_TIME_FINISHED,NOT_ACCOMPLISH_TIME,\n" +
            "OVERDUE_NOT_STTLEMENT,NOT_UNEQUIVOCAL_DATETIME\n"};
    //表四署內
    //根据需求统计指定条件下的立项个数，根据不同条件对sql进行不同的拼接
    private static String[] str4_one = {"SELECT DISTINCT t6.DICT_NAME AS SUPERV_ITEM,t4.DICT_NAME,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_OFFICE t3\n" +
            "WHERE t3.DEALT_TIME != '' AND t3.S_ATIME < '","' AND t3.DEALT_TIME > '","' AND t3.ID\n" +
            "IN (SELECT DISTINCT OFFICE_ID FROM SUP_APPRO_OFFICE_DEPT WHERE "," DEPT_TYPE = '1')\n" +
            "AND t3.ID IN (SELECT APPRO_ID FROM SUP_APPRO_PLAN WHERE RES_STEP = t4.ID )\n" +
            "AND t3.S_ATIME < '","' AND t3.DEALT_TIME > '","' AND STATIS_ITEM_SOURCE = t6.ID) AS YQJZ ,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_OFFICE t3\n" +
            "WHERE t3.DEALT_TIME != '' AND t3.S_ATIME < '","' AND t3.DEALT_TIME > '","' AND t3.ID\n" +
            "IN (SELECT DISTINCT OFFICE_ID FROM SUP_APPRO_OFFICE_DEPT WHERE "," DEPT_TYPE = '1')\n" +
            "AND t3.ID IN (SELECT APPRO_ID FROM SUP_APPRO_PLAN WHERE RES_STEP = t4.ID )\n" +
            "AND t3.S_ATIME > '","' AND t3.APPR_DATE < '","' AND STATIS_ITEM_SOURCE = t6.ID)  AS BNXZ ,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_OFFICE t3 WHERE APPR_DATE BETWEEN '","' AND '","' AND t3.ID IN \n" +
            "(SELECT DISTINCT OFFICE_ID FROM SUP_APPRO_OFFICE_DEPT WHERE "," DEPT_TYPE = '1')\n" +
            "AND t3.ID IN (SELECT APPRO_ID FROM SUP_APPRO_PLAN WHERE RES_STEP = t4.ID ) AND STATIS_ITEM_SOURCE = t6.ID)  AS XZ ,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_OFFICE t3\n" +
            "WHERE (t3.DEALT_TIME <= t3.LIMIT_DATE OR LIMIT_DATE = '') AND APPLY_STATE = '7' AND t3.ID\n" +
            "IN (SELECT DISTINCT OFFICE_ID FROM SUP_APPRO_OFFICE_DEPT WHERE "," DEPT_TYPE = '1')\n" +
            "AND t3.ID IN (SELECT APPRO_ID FROM SUP_APPRO_PLAN WHERE RES_STEP = t4.ID )\n" +
            "AND t3.APPR_DATE BETWEEN '","' AND '","' AND STATIS_ITEM_SOURCE = t6.ID) AS ON_TIME_FINISHED,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_OFFICE t3\n" +
            "WHERE t3.DEALT_TIME > t3.LIMIT_DATE AND t3.LIMIT_DATE != '' AND APPLY_STATE = '7' AND t3.ID\n" +
            "IN (SELECT DISTINCT OFFICE_ID FROM SUP_APPRO_OFFICE_DEPT WHERE "," DEPT_TYPE = '1')\n" +
            "AND t3.ID IN (SELECT APPRO_ID FROM SUP_APPRO_PLAN WHERE RES_STEP = t4.ID )\n" +
            "AND t3.APPR_DATE BETWEEN '","' AND '","' AND STATIS_ITEM_SOURCE = t6.ID) AS OVER_TIME_FINISHED,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_OFFICE t3\n" +
            "WHERE TO_CHAR(SYSDATE) < t3.LIMIT_DATE AND LIMIT_DATE != '' AND t3.S_WF_STATE = '1' AND t3.APPLY_STATE != '7' AND t3.ID\n" +
            "IN (SELECT DISTINCT OFFICE_ID FROM SUP_APPRO_OFFICE_DEPT WHERE "," DEPT_TYPE = '1')\n" +
            "AND t3.ID IN (SELECT APPRO_ID FROM SUP_APPRO_PLAN WHERE RES_STEP = t4.ID )\n" +
            "AND t3.APPR_DATE BETWEEN '","' AND '","' AND STATIS_ITEM_SOURCE = t6.ID) AS NOT_ACCOMPLISH_TIME,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_OFFICE t3\n" +
            "WHERE LIMIT_DATE != '' AND TO_CHAR(SYSDATE) >= t3.LIMIT_DATE AND t3.S_WF_STATE = '1' AND t3.APPLY_STATE != '7' AND t3.ID\n" +
            "IN (SELECT DISTINCT OFFICE_ID FROM SUP_APPRO_OFFICE_DEPT WHERE "," DEPT_TYPE = '1')\n" +
            "AND t3.ID IN (SELECT APPRO_ID FROM SUP_APPRO_PLAN WHERE RES_STEP = t4.ID )\n" +
            "AND t3.APPR_DATE BETWEEN '","' AND '","' AND STATIS_ITEM_SOURCE = t6.ID) AS OVERDUE_NOT_STTLEMENT,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_OFFICE t3\n" +
            "WHERE LIMIT_DATE = '' AND t3.S_WF_STATE = '1' AND t3.APPLY_STATE != '7' AND t3.ID\n" +
            "IN (SELECT DISTINCT OFFICE_ID FROM SUP_APPRO_OFFICE_DEPT WHERE "," DEPT_TYPE = '1')\n" +
            "AND t3.ID IN (SELECT APPRO_ID FROM SUP_APPRO_PLAN WHERE RES_STEP = t4.ID )\n" +
            "AND t3.APPR_DATE BETWEEN '","' AND '","' AND STATIS_ITEM_SOURCE = t6.ID) AS NOT_UNEQUIVOCAL_DATETIME\n" +
            "FROM SUP_SERV_DICT t4,SUP_SERV_DICT t6\n" +
            "WHERE t6.DICT_KINDS = '004' AND t4.DICT_KINDS = '005'\n"+
            "AND t4.ID IN (SELECT DISTINCT RES_STEP FROM SUP_APPRO_PLAN)\n" +
            "AND t6.ID IN (SELECT DISTINCT STATIS_ITEM_SOURCE FROM SUP_APPRO_OFFICE)\n"+
            "GROUP BY t6.DICT_NAME,t4.DICT_NAME,YQJZ,BNXZ,XZ,ON_TIME_FINISHED,OVER_TIME_FINISHED,NOT_ACCOMPLISH_TIME,\n" +
            "OVERDUE_NOT_STTLEMENT,NOT_UNEQUIVOCAL_DATETIME"};
    //表四司内
    //根据需求统计指定条件下的立项个数，根据不同条件对sql进行不同的拼接
    private static String[] str4_two = {"SELECT DISTINCT t6.DICT_NAME AS SUPERV_ITEM,t4.DICT_NAME,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_BUREAU t3\n" +
            "WHERE t3.DEALT_TIME != '' AND t3.S_ATIME < '","' AND t3.DEALT_TIME > '","' AND t3.ID\n" +
            "IN (SELECT DISTINCT BUREAU_ID FROM SUP_APPRO_BUREAU_STAFF WHERE "," DEPT_TYPE = '1')\n" +
            "AND t3.ID IN (SELECT APPRO_ID FROM SUP_APPRO_PLAN WHERE RES_STEP = t4.ID )\n" +
            "AND t3.S_ATIME < '","' AND t3.DEALT_TIME > '","' AND STATIS_ITEM_SOURCE = t6.ID) AS YQJZ ,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_BUREAU t3\n" +
            "WHERE t3.DEALT_TIME != '' AND t3.S_ATIME < '","' AND t3.DEALT_TIME > '","' AND t3.ID\n" +
            "IN (SELECT DISTINCT BUREAU_ID FROM SUP_APPRO_BUREAU_STAFF WHERE "," DEPT_TYPE = '1')\n" +
            "AND t3.ID IN (SELECT APPRO_ID FROM SUP_APPRO_PLAN WHERE RES_STEP = t4.ID )\n" +
            "AND t3.S_ATIME > '","' AND t3.APPR_DATE < '","' AND STATIS_ITEM_SOURCE = t6.ID)  AS BNXZ ,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_OFFICE t3 WHERE APPR_DATE BETWEEN '","' AND '","' AND t3.ID IN \n" +
            "(SELECT DISTINCT BUREAU_ID FROM SUP_APPRO_BUREAU_STAFF WHERE "," DEPT_TYPE = '1'\n" +
            "AND t3.ID IN (SELECT APPRO_ID FROM SUP_APPRO_PLAN WHERE RES_STEP = t4.ID )) AND STATIS_ITEM_SOURCE = t6.ID)  AS XZ ,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_BUREAU t3\n" +
            "WHERE (t3.DEALT_TIME <= t3.LIMIT_DATE OR LIMIT_DATE = '') AND APPLY_STATE = '7' AND t3.ID\n" +
            "IN (SELECT DISTINCT BUREAU_ID FROM SUP_APPRO_BUREAU_STAFF WHERE "," DEPT_TYPE = '1')\n" +
            "AND t3.ID IN (SELECT APPRO_ID FROM SUP_APPRO_PLAN WHERE RES_STEP = t4.ID )\n" +
            "AND t3.APPR_DATE BETWEEN '","' AND '","' AND STATIS_ITEM_SOURCE = t6.ID) AS ON_TIME_FINISHED,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_BUREAU t3\n" +
            "WHERE t3.DEALT_TIME > t3.LIMIT_DATE AND t3.LIMIT_DATE != '' AND APPLY_STATE = '7' AND t3.ID\n" +
            "IN (SELECT DISTINCT BUREAU_ID FROM SUP_APPRO_BUREAU_STAFF WHERE "," DEPT_TYPE = '1')\n" +
            "AND t3.ID IN (SELECT APPRO_ID FROM SUP_APPRO_PLAN WHERE RES_STEP = t4.ID )\n" +
            "AND t3.APPR_DATE BETWEEN '","' AND '","' AND STATIS_ITEM_SOURCE = t6.ID) AS OVER_TIME_FINISHED,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_BUREAU t3\n" +
            "WHERE TO_CHAR(SYSDATE) < t3.LIMIT_DATE AND LIMIT_DATE != '' AND t3.S_WF_STATE = '1' AND t3.APPLY_STATE != '7' AND t3.ID\n" +
            "IN (SELECT DISTINCT BUREAU_ID FROM SUP_APPRO_BUREAU_STAFF WHERE "," DEPT_TYPE = '1')\n" +
            "AND t3.ID IN (SELECT APPRO_ID FROM SUP_APPRO_PLAN WHERE RES_STEP = t4.ID )\n" +
            "AND t3.APPR_DATE BETWEEN '","' AND '","' AND STATIS_ITEM_SOURCE = t6.ID) AS NOT_ACCOMPLISH_TIME,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_BUREAU t3\n" +
            "WHERE LIMIT_DATE != '' AND TO_CHAR(SYSDATE) >= t3.LIMIT_DATE AND t3.S_WF_STATE = '1' AND t3.APPLY_STATE != '7' AND t3.ID\n" +
            "IN (SELECT DISTINCT BUREAU_ID FROM SUP_APPRO_BUREAU_STAFF WHERE "," DEPT_TYPE = '1')\n" +
            "AND t3.ID IN (SELECT APPRO_ID FROM SUP_APPRO_PLAN WHERE RES_STEP = t4.ID )\n" +
            "AND t3.APPR_DATE BETWEEN '","' AND '","' AND STATIS_ITEM_SOURCE = t6.ID) AS OVERDUE_NOT_STTLEMENT,\n" +
            "(SELECT COUNT(*) FROM SUP_APPRO_BUREAU t3\n" +
            "WHERE LIMIT_DATE = '' AND t3.S_WF_STATE = '1' AND t3.APPLY_STATE != '7' AND t3.ID\n" +
            "IN (SELECT DISTINCT BUREAU_ID FROM SUP_APPRO_BUREAU_STAFF WHERE "," DEPT_TYPE = '1')\n" +
            "AND t3.ID IN (SELECT APPRO_ID FROM SUP_APPRO_PLAN WHERE RES_STEP = t4.ID )\n" +
            "AND t3.APPR_DATE BETWEEN '","' AND '","' AND STATIS_ITEM_SOURCE = t6.ID) AS NOT_UNEQUIVOCAL_DATETIME\n" +
            "FROM SUP_SERV_DICT t4,SUP_SERV_DICT t6\n" +
            "WHERE t6.DICT_KINDS = '004' AND t4.DICT_KINDS = '005'\n" +
            "AND t4.ID IN (SELECT DISTINCT RES_STEP FROM SUP_APPRO_PLAN)\n" +
            "AND t6.ID IN (SELECT DISTINCT STATIS_ITEM_SOURCE FROM SUP_APPRO_BUREAU)\n"+
            "GROUP BY t6.DICT_NAME,t4.DICT_NAME,YQJZ,BNXZ,XZ,ON_TIME_FINISHED,OVER_TIME_FINISHED,NOT_ACCOMPLISH_TIME,\n" +
            "OVERDUE_NOT_STTLEMENT,NOT_UNEQUIVOCAL_DATETIME"};
    //表五/表六署內sql
    //根据需求统计指定条件下的立项个数，根据不同条件对sql进行不同的拼接
    private static String[] str5_one = {"SELECT DISTINCT ID,DICT_NAME AS ITEM_SOURCE,ISSUE_CODE,SUPERV_ITEM,HOST_UNIT,CO_ORGANIZER,LIMIT_DATE,NOT_LIMIT_TIME_REASON,GAIN_TEXT FROM\n" +
            " (SELECT t1.ID,t8.DICT_NAME,t1.ISSUE_CODE,t1.SUPERV_ITEM,'' AS HOST_UNIT,'' AS CO_ORGANIZER,t1.LIMIT_DATE,t1.NOT_LIMIT_TIME_REASON,\n" +
            "           (SELECT GAIN_TEXT FROM SUP_APPRO_GAIN WHERE APPRO_ID = t1.ID AND ROWNUM = 1 AND DEPT_CODE = \n" +
            "              (SELECT DEPT_CODE FROM SUP_APPRO_OFFICE_DEPT WHERE OFFICE_ID = t1.ID AND DEPT_TYPE = '1') \n" +
            "               ORDER BY GAIN_MONTH DESC) AS GAIN_TEXT\n" +
            "  FROM SUP_APPRO_OFFICE t1,SUP_SERV_DICT t8\n" +
            "  WHERE t1.ID IN (SELECT OFFICE_ID FROM SUP_APPRO_OFFICE_DEPT WHERE ", " DEPT_CODE = '", "'", "AND", " DEPT_TYPE = '1')\n",
            "  AND t8.ID = t1.STATIS_ITEM_SOURCE\n" +
            "  AND t1.APPR_DATE BETWEEN '", "' AND '", "') AAA\n" +
            "GROUP BY ID,DICT_NAME,ISSUE_CODE,SUPERV_ITEM,HOST_UNIT,CO_ORGANIZER,LIMIT_DATE,NOT_LIMIT_TIME_REASON,GAIN_TEXT"};
    //表五/表六司內sql
    //根据需求统计指定条件下的立项个数，根据不同条件对sql进行不同的拼接
    private static String[] str5_two = {"SELECT DISTINCT ID,DICT_NAME AS ITEM_SOURCE,ISSUE_CODE,SUPERV_ITEM,HOST_UNIT,CO_ORGANIZER,LIMIT_DATE,NOT_LIMIT_TIME_REASON,GAIN_TEXT FROM\n" +
            " (SELECT t1.ID,t8.DICT_NAME,t1.ISSUE_CODE,t1.SUPERV_ITEM,'' AS HOST_UNIT,'' AS CO_ORGANIZER,t1.LIMIT_DATE,t1.NOT_LIMIT_TIME_REASON," +
            "           (SELECT GAIN_TEXT FROM SUP_APPRO_GAIN WHERE APPRO_ID = t1.ID AND ROWNUM = 1 AND DEPT_CODE = " +
            "              (SELECT DEPT_CODE FROM SUP_APPRO_BUREAU_STAFF WHERE BUREAU_ID = t1.ID AND DEPT_TYPE = '1') \n" +
            "               ORDER BY GAIN_MONTH DESC) AS GAIN_TEXT\n" +
            "  FROM SUP_APPRO_BUREAU t1,SUP_SERV_DICT t8\n" +
            " WHERE t1.ID IN (SELECT BUREAU_ID FROM SUP_APPRO_BUREAU_STAFF WHERE ", " DEPT_CODE = '", "'", " AND", " DEPT_TYPE = '1')\n",
            " AND t8.ID = t1.STATIS_ITEM_SOURCE\n" +
            " AND t1.APPR_DATE BETWEEN '", "' AND '", "') BBB\n" +
            "GROUP BY ID,DICT_NAME,ISSUE_CODE,SUPERV_ITEM,HOST_UNIT,CO_ORGANIZER,LIMIT_DATE,NOT_LIMIT_TIME_REASON,GAIN_TEXT"};
    //表七署內
    //根据需求统计指定条件下的立项个数，根据不同条件对sql进行不同的拼接
    private static String[] str7_one = {"SELECT ID,DICT_NAME AS ITEM_SOURCE,ISSUE_CODE,SUPERV_ITEM,HOST_UNIT,CO_ORGANIZER,LIMIT_DATE,NOT_LIMIT_TIME_REASON,GAIN_TEXT FROM\n" +
            " (SELECT t1.ID,t8.DICT_NAME,t1.ISSUE_CODE,t1.SUPERV_ITEM,'' AS HOST_UNIT,'' AS CO_ORGANIZER,t1.LIMIT_DATE,t1.NOT_LIMIT_TIME_REASON," +
            "           (SELECT GAIN_TEXT FROM SUP_APPRO_GAIN WHERE APPRO_ID = t1.ID AND ROWNUM = 1 AND DEPT_CODE = \n" +
            "              (SELECT DEPT_CODE FROM SUP_APPRO_OFFICE_DEPT WHERE OFFICE_ID = t1.ID AND DEPT_TYPE = '1') \n" +
            "               ORDER BY GAIN_MONTH DESC) AS GAIN_TEXT\n" +
            "  FROM SUP_APPRO_OFFICE t1,SUP_SERV_DICT t8\n" +
            "  WHERE t1.ID IN (SELECT OFFICE_ID FROM SUP_APPRO_OFFICE_DEPT WHERE ", "DEPT_CODE = '", "'", " AND ", "DEPT_TYPE = '1')\n" +
            "  AND t1.APPLY_STATE = '7' AND t1.DEALT_TIME > t1.LIMIT_DATE\n" +
            "  AND t8.ID = t1.STATIS_ITEM_SOURCE\n" +
            "  AND t1.APPR_DATE BETWEEN '", "' AND '", "') AAA\n" +
            "GROUP BY ID,DICT_NAME,ISSUE_CODE,SUPERV_ITEM,HOST_UNIT,CO_ORGANIZER,LIMIT_DATE,NOT_LIMIT_TIME_REASON,GAIN_TEXT"};
    //表七司内
    //根据需求统计指定条件下的立项个数，根据不同条件对sql进行不同的拼接
    private static String[] str7_two = {"SELECT ID,DICT_NAME AS ITEM_SOURCE,ISSUE_CODE,SUPERV_ITEM,HOST_UNIT,CO_ORGANIZER,LIMIT_DATE,NOT_LIMIT_TIME_REASON,GAIN_TEXT FROM\n" +
            " (SELECT t1.ID,t8.DICT_NAME,t1.ISSUE_CODE,t1.SUPERV_ITEM,'' AS HOST_UNIT,'' AS CO_ORGANIZER,t1.LIMIT_DATE,t1.NOT_LIMIT_TIME_REASON, \n" +
            "           (SELECT GAIN_TEXT FROM SUP_APPRO_GAIN WHERE APPRO_ID = t1.ID AND ROWNUM = 1 AND DEPT_CODE = \n" +
            "              (SELECT DEPT_CODE FROM SUP_APPRO_BUREAU_STAFF WHERE BUREAU_ID = t1.ID AND DEPT_TYPE = '1') \n" +
            "               ORDER BY GAIN_MONTH DESC) AS GAIN_TEXT\n" +
            "  FROM SUP_APPRO_BUREAU t1,SUP_SERV_DICT t8\n" +
            " WHERE t1.ID IN (SELECT BUREAU_ID FROM SUP_APPRO_BUREAU_STAFF WHERE ", "DEPT_CODE = '", "'", " AND ", "DEPT_TYPE = '1') \n" +
            " AND t1.APPLY_STATE = '7' AND t1.DEALT_TIME>t1.LIMIT_DATE\n" +
            " AND t8.ID = t1.STATIS_ITEM_SOURCE\n" +
            " AND t1.APPR_DATE BETWEEN '", "' AND '", "') BBB\n" +
            "GROUP BY ID,DICT_NAME,ISSUE_CODE,SUPERV_ITEM,HOST_UNIT,CO_ORGANIZER,LIMIT_DATE,NOT_LIMIT_TIME_REASON,GAIN_TEXT"};
    //表八署內
    //根据需求统计指定条件下的立项个数，根据不同条件对sql进行不同的拼接
    private static String[] str8_one = {"SELECT t1.ID,t5.DICT_NAME AS ITEM_SOURCE,t1.SUPERV_ITEM,'' AS DEPT_NAME,t4.DICT_NAME,'' AS AA,\n" +
            "t1.LIMIT_DATE,t1.NOT_LIMIT_TIME_REASON,'' AS CHARGE_NAME\n" +
            "FROM  SUP_APPRO_OFFICE t1,SUP_APPRO_PLAN t3,SUP_SERV_DICT t4,SUP_SERV_DICT t5\n" +
            "where t1.ID IN (SELECT OFFICE_ID FROM SUP_APPRO_OFFICE_DEPT WHERE ", " DEPT_CODE = ' ", " ' AND ", " DEPT_TYPE = '1')\n" +
            "AND t1.STATIS_ITEM_SOURCE = t5.ID\n"+
            "AND t3.RES_STEP = t4.ID\n" +
            "AND t3.APPRO_ID = t1.ID"};
    //表八司内
    //根据需求统计指定条件下的立项个数，根据不同条件对sql进行不同的拼接
    private static String[] str8_two = {"SELECT t1.ID,t5.DICT_NAME AS ITEM_SOURCE,t1.SUPERV_ITEM,'' AS DEPT_NAME,t4.DICT_NAME,'' AS AA,\n" +
            "t1.LIMIT_DATE,t1.NOT_LIMIT_TIME_REASON,t3.CHARGE_NAME\n" +
            "FROM  SUP_APPRO_BUREAU t1,SUP_APPRO_PLAN t3,SUP_SERV_DICT t4,SUP_SERV_DICT t5\n" +
            "where t1.ID IN (SELECT BUREAU_ID FROM SUP_APPRO_BUREAU_STAFF WHERE ", " DEPT_CODE = ' ", " ' AND ", " DEPT_TYPE = '1')\n" +
            "AND t1.STATIS_ITEM_SOURCE = t5.ID\n"+
            "AND t3.RES_STEP = t4.ID\n" +
            "AND t3.APPRO_ID = t1.ID"};
    //表九
    //根据需求统计指定条件下的立项个数，根据不同条件对sql进行不同的拼接
    private static String[] str9 = {"SELECT ID,DICT_NAME,ISSUE_CODE,SUPERV_ITEM,HOST_UNIT,CO_ORGANIZER,LIMIT_DATE,NOT_LIMIT_TIME_REASON,GAIN_TEXT FROM\n" +
            " (SELECT t1.ID,t9.DICT_NAME,t1.ISSUE_CODE,t1.SUPERV_ITEM,'' AS HOST_UNIT,'' AS CO_ORGANIZER,t1.LIMIT_DATE,t1.NOT_LIMIT_TIME_REASON,\n" +
            "           (SELECT GAIN_TEXT FROM SUP_APPRO_GAIN WHERE APPRO_ID = t1.ID AND ROWNUM = 1 AND DEPT_CODE = " +
            "              (SELECT DEPT_CODE FROM SUP_APPRO_OFFICE_DEPT WHERE OFFICE_ID = t1.ID AND DEPT_TYPE = '1') \n" +
            "               ORDER BY GAIN_MONTH DESC) AS GAIN_TEXT\n" +
            "  FROM SUP_APPRO_OFFICE t1,SUP_APPRO_OFFICE_DEPT t2,SUP_SERV_DICT t9\n" +
            "  WHERE t1.ID IN (SELECT OFFICE_ID FROM SUP_APPRO_OFFICE_DEPT WHERE ","DEPT_CODE IN (SELECT DICTION_ID FROM OA_GW_LEADER_DICTION_SHIP \n" +
            "        \t\t\t\t\tWHERE LEADER_USER_CODE = '", "'", " AND ", " DEPT_TYPE = '1')" ,")",
            "  AND t1.STATIS_ITEM_SOURCE = t9.ID\n" +
            "  AND t1.ID = t2.OFFICE_ID\n" +
            "  AND t1.S_WF_STATE = '1'\n" +
            "  AND t1.LIMIT_DATE != ''\n" +
            "  AND t1.LIMIT_DATE < '", "') AAA\n" +
            "GROUP BY ID,DICT_NAME,ISSUE_CODE,SUPERV_ITEM,HOST_UNIT,CO_ORGANIZER,LIMIT_DATE,NOT_LIMIT_TIME_REASON,GAIN_TEXT"};
    //表十
    //根据需求统计指定条件下的立项个数，根据不同条件对sql进行不同的拼接
    private static String[] str10 = {"SELECT t2.DICT_NAME AS MAJOR_WORK,t3.DEPT_NAME AS PROVIN_NAME,COUNT(t1.FACT_OPERATE) AS FACT_OPERATE\n" +
            "FROM SUP_APPRO_POINT t1,SUP_SERV_DICT t2,SY_ORG_DEPT t3 " +
            "WHERE t1.MAJOR_WORK = t2.ID AND t1.PROVIN_NAME = t3.DEPT_NAME ",
            " AND t1.DEPT_CODE = '", "'", " AND t1.APPR_DATE LIKE '%",
            "%' GROUP BY t2.DICT_NAME,t3.DEPT_NAME\n"};
    //表十一
    //根据需求统计指定条件下的立项个数，根据不同条件对sql进行不同的拼接
    private static String[] str11 = {"SELECT t2.DICT_NAME AS MAJOR_WORK,t3.DICT_NAME AS MAJOR_CONTENT,t4.DICT_NAME AS TARGET3," +
            "t5.DICT_NAME AS TARGET4,t1.FACT_OPERATE,t1.SCHEDULE_PLAN" +
            ",t1.LIMIT_DATE,t1.LIABLE_OFFICE,t1.LIABLE_USER,t1.CENTRALIED_MGR_BUREAU,t1.USER_NAME,t1.USER_TEL,t1.USER_PHONE\n" +
            "FROM SUP_APPRO_POINT t1,SUP_SERV_DICT t2,SUP_SERV_DICT t3,SUP_SERV_DICT t4,SUP_SERV_DICT t5\n" +
            "WHERE t1.MAJOR_WORK = t2.ID AND t1.MAJOR_CONTENT = t3.ID AND t1.TARGET3 = t4.ID AND t1.TARGET4 = t5.ID AND t1.DEPT_CODE = '",
            "' AND t1.APPR_DATE LIKE '%", "%' GROUP BY t2.DICT_NAME,t3.DICT_NAME,t4.DICT_NAME,t5.DICT_NAME,t1.FACT_OPERATE,t1.SCHEDULE_PLAN," +
            "t1.LIMIT_DATE,t1.LIABLE_OFFICE,t1.LIABLE_USER,t1.CENTRALIED_MGR_BUREAU,t1.USER_NAME,t1.USER_TEL,t1.USER_PHONE"};
    //表十二
    //根据需求统计指定条件下的立项个数，根据不同条件对sql进行不同的拼接
    private static String[] str12 = {"SELECT t2.DICT_NAME AS MAJOR_WORK,t3.DICT_NAME AS MAJOR_CONTENT,t1.FACT_OPERATE,t1.SCHEDULE_PLAN,t1.LIMIT_DATE," +
            "t1.PROVIN_NAME,t1.LIABLE_OFFICE,t1.LIABLE_USER,t1.CENTRALIED_MGR_BUREAU", ",t1.S_UNAME,t1.USER_TEL,t1.USER_PHONE",
            " FROM SUP_APPRO_POINT t1,SUP_SERV_DICT t2,SUP_SERV_DICT t3\n" +
            "WHERE t1.MAJOR_WORK = t2.ID AND t1.MAJOR_CONTENT = t3.ID AND ",
            "t1.DEPT_CODE = '", "'", " AND ", "t1.APPR_DATE LIKE '%",
            "%' GROUP BY t2.DICT_NAME,t3.DICT_NAME,t1.FACT_OPERATE,t1.SCHEDULE_PLAN,t1.LIMIT_DATE,"+
            "t1.PROVIN_NAME,t1.LIABLE_OFFICE,t1.LIABLE_USER,t1.CENTRALIED_MGR_BUREAU", ",t1.S_UNAME,t1.USER_TEL,t1.USER_PHONE"};

    /**
     * 判断是否有数据
     *
     * @param paramBean
     * @return
     */
    public OutBean isExportExcel(ParamBean paramBean) throws ParseException {
        //创建session空间，将查询数据存放到session等待判断通过后进行导出
        HttpServletRequest request = Context.getRequest();
        HttpSession session = request.getSession();
        OutBean outBean = new OutBean();
        //调用方法查询数据
        List<Bean> result = (List<Bean>) this.creatSql(paramBean).get("list");
        outBean.put("result", result);
        session.setAttribute("result", result);
        return outBean;
    }

    /**
     * 导出excel表格
     *
     * @return
     */
    public OutBean statements(ParamBean paramBean) {
        //判断通过将数据从session中取出
        HttpServletRequest request = Context.getRequest();
        HttpSession session = request.getSession();
        OutBean outBean1 = null;
        List<Bean> result = (List<Bean>) session.getAttribute("result");
        //根据所选报表不同调用不同的方法进行报表导出
        //formatDataTwo()、formatDataThree()、formatDataOne()根据数据不同调用不同的处理方法对数据进行处理
        Integer a = Integer.parseInt(paramBean.get("type").toString());
        if (!paramBean.getStr("jg1").equals("全部") && !paramBean.getStr("st1").equals("全部")){
            paramBean=getDept_Name(paramBean);
        }
        //对数据进行限制，不为空时进行下载
        if (result.size() != 0) {
            //根据所选参数调用不同的方法进行Excel下载
            switch (a) {
                case 1:
                    FromDbToExcel.exportExcelOne(result, paramBean);
                    break;
                case 2:
                    FromDbToExcel.exportExcelTwo(result, paramBean);
                    break;
                case 3:
                    FromDbToExcel.exportExcelThree(result, paramBean);
                    break;
                case 4:
                    FromDbToExcel.exportExcelFourth(result, paramBean);
                    break;
                case 5:
                    FromDbToExcel.exportExcelFive(formatDataOne(result, paramBean), paramBean);
                    break;
                case 6:
                    FromDbToExcel.exportExcelSix(formatDataOne(result, paramBean), paramBean);
                    break;
                case 7:
                    FromDbToExcel.exportExcelSeven(formatDataOne(result, paramBean), paramBean);
                    break;
                case 8:
                    FromDbToExcel.exportExcelEight(formatDateFourth(result,paramBean), paramBean);
                    break;
                case 9:
                    if (!paramBean.getStr("jg1").equals("全部")){
                        FromDbToExcel.exportExcelNine(formatDataOne(result, paramBean), paramBean,getLeader_Name(paramBean.getStr("jg1")));
                    }else{
                        FromDbToExcel.exportExcelNine(formatDataOne(result, paramBean), paramBean,paramBean.getStr("jg1"));
                    }
                    break;
                case 10:
                    outBean1 = new OutBean();
                    outBean1.put("list", result);
                    FromDbToExcel.exportExcelTen(formatDataTwo(outBean1), paramBean);
                    break;
                case 11:
                    outBean1 = new OutBean();
                    outBean1.put("list", result);
                    FromDbToExcel.exportExcelEleven(formatDataThree(outBean1, paramBean), paramBean);
                    break;
                case 12:
                    outBean1 = new OutBean();
                    outBean1.put("list", result);
                    FromDbToExcel.exportExcelTwelve(formatDataThree(outBean1, paramBean), paramBean);
                    break;
            }
        }
        return new OutBean().setOk();
    }

    /**
     * 查询数据并返回生成柱状图
     *
     * @return
     */
    public OutBean getListBean(ParamBean paramBean) throws ParseException {
        StringBuffer stringBuffer = new StringBuffer();
        String s = (String) paramBean.get("dw1");
        begintime = paramBean.get("begintime").toString() + "-01";
        endtime = getFirstday_EndDate(paramBean.get("endtime").toString());
        //根据署內和司内的不同拼接sql
        if (StringUtils.equals("司内", s)) {
            for (int i = 0 ; i < str1_one.length-4 ; i++){
                if (i%2==0){
                    stringBuffer.append(str1_one[i] + begintime + "-01");
                }else{
                    stringBuffer.append(str1_one[i] + getFirstday_EndDate(endtime));
                }
            }
            stringBuffer.append(str1_one[10]);
            if (!paramBean.get("jg1").toString().equals("全部")) {
                stringBuffer.append(str1_one[11]);
                stringBuffer.append(paramBean.get("jg1").toString());
                stringBuffer.append(str1_one[12]);
            }
            stringBuffer.append(str1_one[13]);
        } else {
            for (int i = 0 ; i < str1_one.length-4 ; i++){
                if (i%2==0){
                    stringBuffer.append(str1_one[i]+begintime);
                }else{
                    stringBuffer.append(str1_one[i]+endtime);
                }
            }
            stringBuffer.append(str1_one[10]);
            if (!paramBean.get("jg1").toString().equals("全部")) {
                stringBuffer.append(str1_one[11]);
                stringBuffer.append(paramBean.get("jg1").toString());
                stringBuffer.append(str1_one[12]);
            }
            stringBuffer.append(str1_one[13]);
        }
        OutBean query = query(stringBuffer, paramBean);
        List<Bean> list = (List<Bean>) query.get("list");
        //数据为空时对数据进行空填值
        if (null == list || list.size() <= 0) {
            List<Bean> list1 = new ArrayList<>();
            Bean bean = new Bean();
            bean.set("ON_TIME_FINISHED", "0");
            bean.set("OVER_TIME_FINISHED", "0");
            bean.set("NOT_ACCOMPLISH_TIME", "0");
            bean.set("OVERDUE_NOT_STTLEMENT", "0");
            bean.set("NOT_UNEQUIVOCAL_DATETIME", "0");
            list1.add(bean);
            query.set("list", list1);
            return query;
        }
        int ON_TIME_FINISHED = 0;
        int OVER_TIME_FINISHED = 0;
        int NOT_ACCOMPLISH_TIME = 0;
        int OVERDUE_NOT_STTLEMENT = 0;
        int NOT_UNEQUIVOCAL_DATETIME = 0;
        for(int i = 0;i<list.size();i++){
            ON_TIME_FINISHED+=Integer.parseInt(list.get(i).get("ON_TIME_FINISHED").toString());
            OVER_TIME_FINISHED+=Integer.parseInt(list.get(i).get("OVER_TIME_FINISHED").toString());
            NOT_ACCOMPLISH_TIME+=Integer.parseInt(list.get(i).get("NOT_ACCOMPLISH_TIME").toString());
            OVERDUE_NOT_STTLEMENT+=Integer.parseInt(list.get(i).get("OVERDUE_NOT_STTLEMENT").toString());
            NOT_UNEQUIVOCAL_DATETIME+=Integer.parseInt(list.get(i).get("NOT_UNEQUIVOCAL_DATETIME").toString());
        }
        Bean bean = new Bean();
        List<Bean> list2 = new ArrayList<>();
        bean.set("ON_TIME_FINISHED", ON_TIME_FINISHED);
        bean.set("OVER_TIME_FINISHED", OVER_TIME_FINISHED);
        bean.set("NOT_ACCOMPLISH_TIME", NOT_ACCOMPLISH_TIME);
        bean.set("OVERDUE_NOT_STTLEMENT", OVERDUE_NOT_STTLEMENT);
        bean.set("NOT_UNEQUIVOCAL_DATETIME", NOT_UNEQUIVOCAL_DATETIME);
        list2.add(bean);
        query.set("list", list2);
        return query;
    }

    /**
     * 拼接sql
     *
     * @return
     */
    private OutBean creatSql(ParamBean paramBean) throws ParseException {
        StringBuffer stringBuffer = null;
        String s;
        Date date;
        Map map;
        Integer yyyy = 0 ;
        Integer mm = 0 ;
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM");
        Integer a = Integer.parseInt(paramBean.get("type").toString());
        if (a <= 4 || a == 6) {
            begintime = paramBean.get("begintime").toString();
            endtime = paramBean.get("endtime").toString();
        }
        //根据选择报表的不同对sql与参数进行拼接
        switch (a) {
            case 1:
                stringBuffer = new StringBuffer();
                //根据所选导出流程单位的不同进行不同sql和参数的拼接
                if ("署内".equals(paramBean.get("dw1").toString())) {
                    for (int i = 0 ; i < str1_one.length-4 ; i++){
                        if (i%2==0){
                            stringBuffer.append(str1_one[i] + begintime + "-01");
                        }else{
                            stringBuffer.append(str1_one[i] + getFirstday_EndDate(endtime));
                        }
                    }
                    stringBuffer.append(str1_one[10]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(str1_one[11]);
                        stringBuffer.append(paramBean.get("jg1").toString());
                        stringBuffer.append(str1_one[12]);
                    }
                    stringBuffer.append(str1_one[13]);
                } else {
                    for (int i = 0 ; i < str1_two.length-4 ; i++){
                        if (i%2==0){
                            stringBuffer.append(str1_two[i] + begintime + "-01");
                        }else{
                            stringBuffer.append(str1_two[i] + getFirstday_EndDate(endtime));
                        }
                    }
                    stringBuffer.append(str1_two[10]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(str1_two[11]);
                        stringBuffer.append(paramBean.get("jg1").toString());
                        stringBuffer.append(str1_two[12]);
                    }
                    stringBuffer.append(str1_one[13]);
                }
                break;
            case 2:
                stringBuffer = new StringBuffer();
                yyyy = Integer.parseInt(paramBean.get("begintime").toString().substring(0, 4));
                mm = Integer.parseInt(paramBean.get("begintime").toString().substring(5));
                //根据所选导出流程单位的不同进行不同sql和参数的拼接
                if ("署内".equals(paramBean.get("dw1").toString())) {
                    stringBuffer.append(str2_one[0]);
                    stringBuffer.append(yyyy+"-"+(mm-1)+"-01");
                    stringBuffer.append(str2_one[1]);
                    stringBuffer.append(getFirstday_EndDate(yyyy+"-"+(mm-1)));
                    stringBuffer.append(str2_one[2]);
                    stringBuffer.append((yyyy-1)+"-01"+"-01");
                    stringBuffer.append(str2_one[3]);
                    stringBuffer.append(getFirstday_EndDate((yyyy-1)+"-12"));
                    stringBuffer.append(str2_one[4]);
                    stringBuffer.append(yyyy+"-"+(mm-1)+"-01");
                    stringBuffer.append(str2_one[5]);
                    stringBuffer.append(getFirstday_EndDate(yyyy+"-"+(mm-1)));
                    stringBuffer.append(str2_one[6]);
                    stringBuffer.append(yyyy+"-01-01");
                    stringBuffer.append(str2_one[7]);
                    stringBuffer.append(getFirstday_EndDate(yyyy+"-"+(mm-1)));
                    for (int i = 8 ; i < str2_one.length-4 ;i++){
                        if (i%2==0){
                            stringBuffer.append(str2_one[i] + begintime + "-01");
                        }else{
                            stringBuffer.append(str2_one[i] + getFirstday_EndDate(endtime));
                        }
                    }
                    stringBuffer.append(str2_one[20]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(str2_one[21]);
                        stringBuffer.append(paramBean.get("jg1").toString());
                        stringBuffer.append(str2_one[22]);
                    }
                    stringBuffer.append(str2_one[23]);
                } else {
                    stringBuffer.append(str2_two[0]);
                    stringBuffer.append(yyyy+"-"+(mm-1)+"-01");
                    stringBuffer.append(str2_two[1]);
                    stringBuffer.append(getFirstday_EndDate(yyyy+"-"+(mm-1)));
                    stringBuffer.append(str2_two[2]);
                    stringBuffer.append((yyyy-1)+"-01"+"-01");
                    stringBuffer.append(str2_two[3]);
                    stringBuffer.append(getFirstday_EndDate((yyyy-1)+"-12"));
                    stringBuffer.append(str2_two[4]);
                    stringBuffer.append(yyyy+"-"+(mm-1)+"-01");
                    stringBuffer.append(str2_two[5]);
                    stringBuffer.append(getFirstday_EndDate(yyyy+"-"+(mm-1)));
                    stringBuffer.append(str2_two[6]);
                    stringBuffer.append(yyyy+"-01-01");
                    stringBuffer.append(str2_two[7]);
                    stringBuffer.append(getFirstday_EndDate(yyyy+"-"+(mm-1)));
                    for (int i = 8 ; i < str2_two.length-4 ;i++){
                        if (i%2==0){
                            stringBuffer.append(str2_two[i] + begintime + "-01");
                        }else{
                            stringBuffer.append(str2_two[i] + getFirstday_EndDate(endtime));
                        }
                    }
                    stringBuffer.append(str2_two[20]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(str2_two[21]);
                        stringBuffer.append(paramBean.get("jg1").toString());
                        stringBuffer.append(str2_two[22]);
                    }
                    stringBuffer.append(str2_two[23]);
                }
                break;
            case 3:
                stringBuffer = new StringBuffer();
                yyyy = Integer.parseInt(paramBean.get("begintime").toString().substring(0, 4));
                mm = Integer.parseInt(paramBean.get("begintime").toString().substring(5));
                //根据所选导出流程单位的不同进行不同sql和参数的拼接
                if ("署内".equals(paramBean.get("dw1").toString())) {
                    stringBuffer.append(str3_one[0] + yyyy+"-"+(mm-1)+"-01");
                    stringBuffer.append(str3_one[1] + getFirstday_EndDate(yyyy+"-"+(mm-1)));
                    stringBuffer.append(str3_one[2]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(" DEPT_CODE = '"+paramBean.get("jg1")+"' AND ");
                    }
                    stringBuffer.append(str3_one[3] + (yyyy-1)+"-01"+"-01");
                    stringBuffer.append(str3_one[4] + getFirstday_EndDate((yyyy-1)+"-12"));
                    stringBuffer.append(str3_one[5] + yyyy+"-"+(mm-1)+"-01");
                    stringBuffer.append(str3_one[6] + getFirstday_EndDate(yyyy+"-"+(mm-1)));
                    stringBuffer.append(str3_one[7]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(" DEPT_CODE = '"+paramBean.get("jg1")+"' AND ");
                    }
                    stringBuffer.append(str3_one[8] + yyyy+"-01-01");
                    stringBuffer.append(str3_one[9] + getFirstday_EndDate(yyyy+"-"+(mm-1)));
                    stringBuffer.append(str3_one[10] + begintime + "-01");
                    stringBuffer.append(str3_one[11] + getFirstday_EndDate(endtime) + str3_one[12]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(" DEPT_CODE = '"+paramBean.get("jg1")+"' AND ");
                    }
                    stringBuffer.append(str3_one[13]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(" DEPT_CODE = '"+paramBean.get("jg1")+"' AND ");
                    }
                    stringBuffer.append(str3_one[14] + begintime + "-01");
                    stringBuffer.append(str3_one[15] + getFirstday_EndDate(endtime) + str3_one[16]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(" DEPT_CODE = '"+paramBean.get("jg1")+"' AND ");
                    }
                    stringBuffer.append(str3_one[17] + begintime + "-01");
                    stringBuffer.append(str3_one[18] + getFirstday_EndDate(endtime) + str3_one[19]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(" DEPT_CODE = '"+paramBean.get("jg1")+"' AND ");
                    }
                    stringBuffer.append(str3_one[20] + begintime + "-01");
                    stringBuffer.append(str3_one[21] + getFirstday_EndDate(endtime) + str3_one[22]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(" DEPT_CODE = '"+paramBean.get("jg1")+"' AND ");
                    }
                    stringBuffer.append(str3_one[23] + begintime + "-01");
                    stringBuffer.append(str3_one[24] + getFirstday_EndDate(endtime) + str3_one[25]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(" DEPT_CODE = '"+paramBean.get("jg1")+"' AND ");
                    }
                    stringBuffer.append(str3_one[26] + begintime + "-01");
                    stringBuffer.append(str3_one[27] + getFirstday_EndDate(endtime) + str3_one[28]);
                } else {
                    stringBuffer.append(str3_two[0] + yyyy+"-"+(mm-1)+"-01");
                    stringBuffer.append(str3_two[1] + getFirstday_EndDate(yyyy+"-"+(mm-1)));
                    stringBuffer.append(str3_two[2]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(" DEPT_CODE = '"+paramBean.get("jg1")+"' AND ");
                    }
                    stringBuffer.append(str3_two[3] + (yyyy-1)+"-01"+"-01");
                    stringBuffer.append(str3_two[4] + getFirstday_EndDate((yyyy-1)+"-12"));
                    stringBuffer.append(str3_two[5] + yyyy+"-"+(mm-1)+"-01");
                    stringBuffer.append(str3_two[6] + getFirstday_EndDate(yyyy+"-"+(mm-1)));
                    stringBuffer.append(str3_two[7]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(" DEPT_CODE = '"+paramBean.get("jg1")+"' AND ");
                    }
                    stringBuffer.append(str3_two[8] + yyyy+"-01-01");
                    stringBuffer.append(str3_two[9] + getFirstday_EndDate(yyyy+"-"+(mm-1)));
                    stringBuffer.append(str3_two[10] + begintime + "-01");
                    stringBuffer.append(str3_two[11] + getFirstday_EndDate(endtime) + str3_two[12]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(" DEPT_CODE = '"+paramBean.get("jg1")+"' AND ");
                    }
                    stringBuffer.append(str3_two[13]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(" DEPT_CODE = '"+paramBean.get("jg1")+"' AND ");
                    }
                    stringBuffer.append(str3_two[14] + begintime + "-01");
                    stringBuffer.append(str3_two[15] + getFirstday_EndDate(endtime) + str3_two[16]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(" DEPT_CODE = '"+paramBean.get("jg1")+"' AND ");
                    }
                    stringBuffer.append(str3_two[17] + begintime + "-01");
                    stringBuffer.append(str3_two[18] + getFirstday_EndDate(endtime) + str3_two[19]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(" DEPT_CODE = '"+paramBean.get("jg1")+"' AND ");
                    }
                    stringBuffer.append(str3_two[20] + begintime + "-01");
                    stringBuffer.append(str3_two[21] + getFirstday_EndDate(endtime) + str3_two[22]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(" DEPT_CODE = '"+paramBean.get("jg1")+"' AND ");
                    }
                    stringBuffer.append(str3_two[23] + begintime + "-01");
                    stringBuffer.append(str3_two[24] + getFirstday_EndDate(endtime) + str3_two[25]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(" DEPT_CODE = '"+paramBean.get("jg1")+"' AND ");
                    }
                    stringBuffer.append(str3_two[26] + begintime + "-01");
                    stringBuffer.append(str3_two[27] + getFirstday_EndDate(endtime) + str3_two[28]);
                }
                break;
            case 4:
                stringBuffer = new StringBuffer();
                yyyy = Integer.parseInt(paramBean.get("begintime").toString().substring(0, 4));
                mm = Integer.parseInt(paramBean.get("begintime").toString().substring(5));
                //根据所选导出流程单位的不同进行不同sql和参数的拼接
                if ("署内".equals(paramBean.get("dw1").toString())) {
                    stringBuffer.append(str4_one[0] + yyyy+"-"+(mm-1)+"-01");
                    stringBuffer.append(str4_one[1] + getFirstday_EndDate(yyyy+"-"+(mm-1)));
                    stringBuffer.append(str4_one[2]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(" DEPT_CODE = '"+paramBean.get("jg1")+"' AND ");
                    }
                    stringBuffer.append(str4_one[3] + (yyyy-1)+"-01"+"-01");
                    stringBuffer.append(str4_one[4] + getFirstday_EndDate((yyyy-1)+"-12"));
                    stringBuffer.append(str4_one[5] + yyyy+"-"+(mm-1)+"-01");
                    stringBuffer.append(str4_one[6] + getFirstday_EndDate(yyyy+"-"+(mm-1)));
                    stringBuffer.append(str4_one[7]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(" DEPT_CODE = '"+paramBean.get("jg1")+"' AND ");
                    }
                    stringBuffer.append(str4_one[8] + yyyy+"-01-01");
                    stringBuffer.append(str4_one[9] + getFirstday_EndDate(yyyy+"-"+(mm-1)));
                    stringBuffer.append(str4_one[10] + begintime + "-01");
                    stringBuffer.append(str4_one[11] + getFirstday_EndDate(endtime) + str4_one[12]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(" DEPT_CODE = '"+paramBean.get("jg1")+"' AND ");
                    }
                    stringBuffer.append(str4_one[13]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(" DEPT_CODE = '"+paramBean.get("jg1")+"' AND ");
                    }
                    stringBuffer.append(str4_one[14] + begintime + "-01");
                    stringBuffer.append(str4_one[15] + getFirstday_EndDate(endtime) + str4_one[16]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(" DEPT_CODE = '"+paramBean.get("jg1")+"' AND ");
                    }
                    stringBuffer.append(str4_one[17] + begintime + "-01");
                    stringBuffer.append(str4_one[18] + getFirstday_EndDate(endtime) + str4_one[19]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(" DEPT_CODE = '"+paramBean.get("jg1")+"' AND ");
                    }
                    stringBuffer.append(str4_one[20] + begintime + "-01");
                    stringBuffer.append(str4_one[21] + getFirstday_EndDate(endtime) + str4_one[22]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(" DEPT_CODE = '"+paramBean.get("jg1")+"' AND ");
                    }
                    stringBuffer.append(str4_one[23] + begintime + "-01");
                    stringBuffer.append(str4_one[24] + getFirstday_EndDate(endtime) + str4_one[25]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(" DEPT_CODE = '"+paramBean.get("jg1")+"' AND ");
                    }
                    stringBuffer.append(str4_one[26] + begintime + "-01");
                    stringBuffer.append(str4_one[27] + getFirstday_EndDate(endtime) + str4_one[28]);
                } else {
                    stringBuffer.append(str4_two[0] + yyyy+"-"+(mm-1)+"-01");
                    stringBuffer.append(str4_two[1] + getFirstday_EndDate(yyyy+"-"+(mm-1)));
                    stringBuffer.append(str4_two[2]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(" DEPT_CODE = '"+paramBean.get("jg1")+"' AND ");
                    }
                    stringBuffer.append(str4_two[3] + (yyyy-1)+"-01"+"-01");
                    stringBuffer.append(str4_two[4] + getFirstday_EndDate((yyyy-1)+"-12"));
                    stringBuffer.append(str4_two[5] + yyyy+"-"+(mm-1)+"-01");
                    stringBuffer.append(str4_two[6] + getFirstday_EndDate(yyyy+"-"+(mm-1)));
                    stringBuffer.append(str4_two[7]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(" DEPT_CODE = '"+paramBean.get("jg1")+"' AND ");
                    }
                    stringBuffer.append(str4_two[8] + yyyy+"-01-01");
                    stringBuffer.append(str4_two[9] + getFirstday_EndDate(yyyy+"-"+(mm-1)));
                    stringBuffer.append(str4_two[10] + begintime + "-01");
                    stringBuffer.append(str4_two[11] + getFirstday_EndDate(endtime) + str4_two[12]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(" DEPT_CODE = '"+paramBean.get("jg1")+"' AND ");
                    }
                    stringBuffer.append(str4_two[13]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(" DEPT_CODE = '"+paramBean.get("jg1")+"' AND ");
                    }
                    stringBuffer.append(str4_two[14] + begintime + "-01");
                    stringBuffer.append(str4_two[15] + getFirstday_EndDate(endtime) + str4_two[16]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(" DEPT_CODE = '"+paramBean.get("jg1")+"' AND ");
                    }
                    stringBuffer.append(str4_two[17] + begintime + "-01");
                    stringBuffer.append(str4_two[18] + getFirstday_EndDate(endtime) + str4_two[19]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(" DEPT_CODE = '"+paramBean.get("jg1")+"' AND ");
                    }
                    stringBuffer.append(str4_two[20] + begintime + "-01");
                    stringBuffer.append(str4_two[21] + getFirstday_EndDate(endtime) + str4_two[22]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(" DEPT_CODE = '"+paramBean.get("jg1")+"' AND ");
                    }
                    stringBuffer.append(str4_two[23] + begintime + "-01");
                    stringBuffer.append(str4_two[24] + getFirstday_EndDate(endtime) + str4_two[25]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(" DEPT_CODE = '"+paramBean.get("jg1")+"' AND ");
                    }
                    stringBuffer.append(str4_two[26] + begintime + "-01");
                    stringBuffer.append(str4_two[27] + getFirstday_EndDate(endtime) + str4_two[28]);
                }
                break;
            case 5:
                stringBuffer = new StringBuffer();
                s = paramBean.get("endtime").toString();
                date = df.parse(s);
                map = getFirstday_Lastday_Month(date);
                //根据所选导出流程单位的不同进行不同sql和参数的拼接
                if ("署内".equals(paramBean.get("dw1").toString())) {
                    stringBuffer.append(str5_one[0]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(str5_one[1]);
                        stringBuffer.append(paramBean.get("jg1").toString());
                        stringBuffer.append(str5_one[2]);
                        stringBuffer.append(str5_one[3]);
                    }
                    stringBuffer.append(str5_one[4]);
                    stringBuffer.append("  AND APPLY_STATE = '7' ");
                    stringBuffer.append(str5_one[5]);
                    stringBuffer.append(paramBean.get("begintime").toString() + "-01");
                    stringBuffer.append(str5_one[6]);
                    stringBuffer.append(getFirstday_EndDate(endtime));
                    stringBuffer.append(str5_one[7]);
                } else {
                    stringBuffer.append(str5_two[0]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(str5_two[1]);
                        stringBuffer.append(paramBean.get("jg1").toString());
                        stringBuffer.append(str5_two[2]);
                        stringBuffer.append(str5_two[3]);
                    }
                    stringBuffer.append(str5_two[4]);
                    stringBuffer.append("  AND APPLY_STATE = '7' ");
                    stringBuffer.append(str5_two[5]);
                    stringBuffer.append(paramBean.get("begintime").toString() + "-01");
                    stringBuffer.append(str5_two[6]);
                    stringBuffer.append(getFirstday_EndDate(endtime));
                    stringBuffer.append(str5_two[7]);
                }
                break;
            case 6:
                stringBuffer = new StringBuffer();
                s = paramBean.get("endtime").toString();
                date = df.parse(s);
                map = getFirstday_Lastday_Month(date);
                //根据所选导出流程单位的不同进行不同sql和参数的拼接
                if ("署内".equals(paramBean.get("dw1").toString())) {
                    stringBuffer.append(str5_one[0]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(str5_one[1]);
                        stringBuffer.append(paramBean.get("jg1").toString());
                        stringBuffer.append(str5_one[2]);
                        stringBuffer.append(str5_one[3]);
                    }
                    stringBuffer.append(str5_one[4]);
                    stringBuffer.append("  AND APPLY_STATE != '7' AND S_WF_STATE = '1' ");
                    stringBuffer.append(str5_one[5]);
                    stringBuffer.append(paramBean.get("begintime").toString() + "-01");
                    stringBuffer.append(str5_one[6]);
                    stringBuffer.append(getFirstday_EndDate(endtime));
                    stringBuffer.append(str5_one[7]);
                } else {
                    stringBuffer.append(str5_two[0]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(str5_two[1]);
                        stringBuffer.append(paramBean.get("jg1").toString());
                        stringBuffer.append(str5_two[2]);
                        stringBuffer.append(str5_two[3]);
                    }
                    stringBuffer.append(str5_two[4]);
                    stringBuffer.append("  AND APPLY_STATE != '7' AND S_WF_STATE = '1' ");
                    stringBuffer.append(str5_two[5]);
                    stringBuffer.append(paramBean.get("begintime").toString() + "-01");
                    stringBuffer.append(str5_two[6]);
                    stringBuffer.append(getFirstday_EndDate(endtime));
                    stringBuffer.append(str5_two[7]);
                }
                break;
            case 7:
                stringBuffer = new StringBuffer();
                s = paramBean.get("endtime").toString();
                date = df.parse(s);
                map = getFirstday_Lastday_Month(date);
                //根据所选导出流程单位的不同进行不同sql和参数的拼接
                if ("署内".equals(paramBean.get("dw1").toString())) {
                    stringBuffer.append(str7_one[0]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(str7_one[1]);
                        stringBuffer.append(paramBean.get("jg1").toString());
                        stringBuffer.append(str7_one[2]);
                        stringBuffer.append(str7_one[3]);
                    }
                    stringBuffer.append(str7_one[4]);
                    stringBuffer.append(paramBean.get("begintime").toString() + "-01");
                    stringBuffer.append(str7_one[5]);
                    stringBuffer.append(getFirstday_EndDate(endtime));
                    stringBuffer.append(str7_one[6]);
                } else {
                    stringBuffer.append(str7_two[0]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(str7_two[1]);
                        stringBuffer.append(paramBean.get("jg1").toString());
                        stringBuffer.append(str7_two[2]);
                        stringBuffer.append(str7_two[3]);
                    }
                    stringBuffer.append(str7_two[4]);
                    stringBuffer.append(paramBean.get("begintime").toString() + "-01");
                    stringBuffer.append(str7_two[5]);
                    stringBuffer.append(getFirstday_EndDate(endtime));
                    stringBuffer.append(str7_two[6]);
                }
                break;
            case 8:
                stringBuffer = new StringBuffer();
                //根据所选导出流程单位的不同进行不同sql和参数的拼接
                if ("署内".equals(paramBean.get("dw1").toString())) {
                    stringBuffer.append(str8_one[0]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(str8_one[1]);
                        stringBuffer.append(paramBean.get("jg1").toString());
                        stringBuffer.append(str8_one[2]);
                    }
                    stringBuffer.append(str8_one[3]);
                } else {
                    stringBuffer.append(str8_two[0]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(str8_two[1]);
                        stringBuffer.append(paramBean.get("jg1").toString());
                        stringBuffer.append(str8_two[2]);
                    }
                    stringBuffer.append(str8_two[3]);
                }
                break;
            case 9:
                stringBuffer = new StringBuffer();
                //根据所选导出流程单位的不同进行不同sql和参数的拼接
                if ("署内".equals(paramBean.get("dw1").toString())) {
                    stringBuffer.append(str9[0]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(str9[1]);
                        stringBuffer.append(paramBean.get("jg1").toString());
                        stringBuffer.append(str9[2]);
                        stringBuffer.append(str9[3]);
                    }
                    stringBuffer.append(str9[4]);
                    if (!paramBean.get("jg1").toString().equals("全部")) {
                        stringBuffer.append(str9[5]);
                    }
                    stringBuffer.append(str9[6]);
                    stringBuffer.append(getFirstday_EndDate(paramBean.get("selecttime").toString()));
                    stringBuffer.append(str9[7]);
                }
                break;
            case 10:
                stringBuffer = new StringBuffer();
                stringBuffer.append(str10[0]);
                //根据所选导出流程单位的不同进行不同sql和参数的拼接
                if (!paramBean.get("st1").toString().equals("全部")) {
                    stringBuffer.append(str10[1]);
                    stringBuffer.append(paramBean.get("st1").toString());
                    stringBuffer.append(str10[2]);
                }
                stringBuffer.append(str10[3]);
                stringBuffer.append(paramBean.get("selecttime").toString().substring(0,4));
                stringBuffer.append(str10[4]);
                break;
            case 11:
                stringBuffer = new StringBuffer();
                stringBuffer.append(str11[0]);
                stringBuffer.append(paramBean.get("st1").toString());
                stringBuffer.append(str11[1]);
                stringBuffer.append(paramBean.get("selecttime").toString().substring(0,4));
                stringBuffer.append(str11[2]);
                break;
            case 12:
                stringBuffer = new StringBuffer();
                stringBuffer.append(str12[0]);
                if (!paramBean.get("st1").toString().equals("全部")) {
                    stringBuffer.append(str12[1]);
                }
                stringBuffer.append(str12[2]);
                if (!paramBean.get("st1").toString().equals("全部")) {
                    stringBuffer.append(str12[3]);
                    stringBuffer.append(paramBean.get("st1").toString());
                    stringBuffer.append(str12[4]);
                    stringBuffer.append(str12[5]);
                }
                stringBuffer.append(str12[6]);
                stringBuffer.append(paramBean.get("selecttime").toString().substring(0,4));
                stringBuffer.append(str12[7]);
                if (!paramBean.get("st1").toString().equals("全部")) {
                    stringBuffer.append(str12[8]);
                }
                break;
        }
        System.out.println(stringBuffer);
        return query(stringBuffer, paramBean);
    }

    /**
     * 查询数据
     *
     * @param stringBuffer
     * @param paramBean
     * @return
     */
    private static OutBean query(StringBuffer stringBuffer, ParamBean paramBean) {
        //调用接口传递sql获取数据
        String sql = stringBuffer.toString();
        List<Bean> result = Transaction.getExecutor().query(sql);
        OutBean outBean = new OutBean();
        outBean.put("list", result);
        return outBean;
    }

    /**
     * 根据流程单位动态查询机构信息
     *
     * @param paramBean
     * @return
     */
    public OutBean findDeptName(ParamBean paramBean) {
        String dw = paramBean.get("dw").toString(

        );
        String sql = null;
        Integer a = Integer.parseInt(paramBean.get("type").toString());
        //所选流程单位为署內
        if (dw.equals("署内")) {
            //查询报表所选条件为领导
            if (a == 9) {
                sql = "SELECT LEADER_USER_CODE,LEADER_NAME FROM OA_GW_LEADER_DICTION_SHIP";
            //报表所选机构牵头单位
            } else {
                sql = "SELECT SY_ORG_DEPT.DEPT_CODE, SY_ORG_DEPT.DEPT_NAME FROM PLATFORM.SY_ORG_DEPT \n" +
                        "WHERE ((((((SY_ORG_DEPT.DEPT_SIGN <> 'OT30') \n" +
                        "AND (SY_ORG_DEPT.DEPT_GRADE = 10)) \n" +
                        "AND (SY_ORG_DEPT.DEPT_PCODE = SY_ORG_DEPT.ODEPT_CODE)) \n" +
                        "AND (SY_ORG_DEPT.DEPT_TYPE = 1)) \n" +
                        "AND (SY_ORG_DEPT.TDEPT_CODE = SY_ORG_DEPT.DEPT_CODE)) \n" +
                        "OR (((((SY_ORG_DEPT.DEPT_SIGN <> 'OT30') \n" +
                        "AND (((SY_ORG_DEPT.DEPT_GRADE = 20) \n" +
                        "OR (SY_ORG_DEPT.DEPT_GRADE = 50)) \n" +
                        "OR (SY_ORG_DEPT.DEPT_GRADE = 70))) \n" +
                        "AND (SY_ORG_DEPT.DEPT_CODE = SY_ORG_DEPT.ODEPT_CODE)) \n" +
                        "AND (SY_ORG_DEPT.DEPT_TYPE = 2)) \n" +
                        "AND (((SY_ORG_DEPT.DEPT_LEVEL_OA = 30) \n" +
                        "OR (SY_ORG_DEPT.DEPT_LEVEL_OA = 10)) \n" +
                        "OR (SY_ORG_DEPT.DEPT_LEVEL_OA = 20))))";
            }
            //所选流程单位为司内
        } else if (dw.equals("司内")) {
            sql = "SELECT DEPT_CODE,DEPT_NAME FROM SY_ORG_DEPT WHERE DEPT_SIGN = 'OT10' AND DEPT_LEVEL_OA = '40' AND TDEPT_CODE IN " +
                    "(SELECT SY_ORG_DEPT.DEPT_CODE FROM PLATFORM.SY_ORG_DEPT \n" +
                    "WHERE ((((((SY_ORG_DEPT.DEPT_SIGN <> 'OT30') \n" +
                    "AND (SY_ORG_DEPT.DEPT_GRADE = 10)) \n" +
                    "AND (SY_ORG_DEPT.DEPT_PCODE = SY_ORG_DEPT.ODEPT_CODE)) \n" +
                    "AND (SY_ORG_DEPT.DEPT_TYPE = 1)) \n" +
                    "AND (SY_ORG_DEPT.TDEPT_CODE = SY_ORG_DEPT.DEPT_CODE)) \n" +
                    "OR (((((SY_ORG_DEPT.DEPT_SIGN <> 'OT30') \n" +
                    "AND (((SY_ORG_DEPT.DEPT_GRADE = 20) \n" +
                    "OR (SY_ORG_DEPT.DEPT_GRADE = 50)) \n" +
                    "OR (SY_ORG_DEPT.DEPT_GRADE = 70))) \n" +
                    "AND (SY_ORG_DEPT.DEPT_CODE = SY_ORG_DEPT.ODEPT_CODE)) \n" +
                    "AND (SY_ORG_DEPT.DEPT_TYPE = 2)) \n" +
                    "AND (((SY_ORG_DEPT.DEPT_LEVEL_OA = 30) \n" +
                    "OR (SY_ORG_DEPT.DEPT_LEVEL_OA = 10)) \n" +
                    "OR (SY_ORG_DEPT.DEPT_LEVEL_OA = 20)))))";
        //所选单位为要点类
        } else {
            sql = "SELECT * FROM SY_ORG_DEPT WHERE dept_sign != 'OT30' and dept_grade = '20' and dept_code = odept_code and dept_type = 2";
        }
        StringBuffer append = new StringBuffer(sql);
        OutBean outBean = query(append, paramBean);
        return outBean;
    }

    /**
     * 某一个月最后一天
     *
     * @param date
     * @return
     */
    private static Map getFirstday_Lastday_Month(Date date) {
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(date);
        calendar.add(Calendar.MONTH, -1);
        //上个月最后一天
        calendar.add(Calendar.MONTH, 1);    //加一个月
        calendar.set(Calendar.DATE, 1);        //设置为该月第一天
        calendar.add(Calendar.DATE, -1);    //再减一天即为上个月最后一天
        String day_last = df.format(calendar.getTime());
        StringBuffer endStr = new StringBuffer().append(day_last);
        day_last = endStr.toString();
        Map map = new HashMap();
        map.put("last", day_last);
        return map;
    }

    /**
     * 获取指定年月的最后一天
     *
     * @param str
     */
    private static String getFirstday_EndDate(String str) {
        String[] split = str.split("-");
        Calendar calendar = Calendar.getInstance();
        calendar.set(Calendar.YEAR, Integer.parseInt(split[0]));
        calendar.set(Calendar.MONTH, Integer.parseInt(split[1]) - 1);
        calendar.set(Calendar.DATE, 1);
        int maximum = calendar.getActualMaximum(Calendar.DATE);
        calendar.set(calendar.DATE, maximum);
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        String format2 = format.format(calendar.getTime());
        return format2;
    }

    /**
     * 处理表五、六、七、九的数据
     *
     * @return
     */
    private static List<Bean> formatDataOne(List<Bean> list, ParamBean paramBean) {
        List<Bean> listBean = null;
        Bean bean = null;
        String appro = "" ;
        String id_name = "" ;
        //判断流程选用不同的条件
        if ("署内".equals(paramBean.get("dw1").toString())) {
            appro = "SUP_APPRO_OFFICE_DEPT";
            id_name = "OFFICE_ID" ;
        }else{
            appro = "SUP_APPRO_BUREAU_STAFF";
            id_name = "BUREAU_ID" ;
        }
        for (int i = 0 ; i < list.size() ; i++ ){
            String HOST_UNIT = "" ;
            String CO_ORGANIZER = "" ;
            bean = list.get(i);
            //拼接sql查询立项单单位信息
            listBean = Transaction.getExecutor().query("SELECT t1.DEPT_NAME,t2.DEPT_TYPE FROM SY_ORG_DEPT t1,"+appro+" t2 WHERE " +
                   "t1.DEPT_CODE = t2.DEPT_CODE AND t2."+id_name+" = '"+bean.getStr("ID")+"'");
            for (int j = 0 ; j < listBean.size() ; j++ ){
                Bean bean1 = listBean.get(j);
                //判断单位类别对不同类别的单位进行数据规整
                if (bean1.getStr("DEPT_TYPE").equals("1")){
                    HOST_UNIT = bean1.getStr("DEPT_NAME") + "\n" + HOST_UNIT;
                }else if(bean1.getStr("DEPT_TYPE").equals("2")){
                    if(j==listBean.size()-1){
                        if(HOST_UNIT.length()==0){
                            HOST_UNIT = bean1.getStr("DEPT_NAME");
                        }else{
                            HOST_UNIT = HOST_UNIT + bean1.getStr("DEPT_NAME");;
                        }
                    }else{
                        if(HOST_UNIT.length()==0){
                            HOST_UNIT = bean1.getStr("DEPT_NAME");
                        }else{
                            HOST_UNIT = HOST_UNIT  + "\n" + bean1.getStr("DEPT_NAME");
                        }
                    }
                }else{
                    if(HOST_UNIT.length()!=0){
                        CO_ORGANIZER += CO_ORGANIZER + "\n" + bean1.getStr("DEPT_NAME");
                    }else{
                        CO_ORGANIZER = bean1.getStr("DEPT_NAME") + "\n" ;
                    }
                }
            }
            //将不同的单位进行绑定
            bean.set("HOST_UNIT",HOST_UNIT);
            bean.set("CO_ORGANIZER",CO_ORGANIZER);
        }
        return list;
    }

    /**
     * 表十数据处理
     * 根据所需数据形式将数据处理成{重点工作，根据重点工作对应的单位和措施数{{单位1，{措施数1，措施数2....}},{单位2，{措施数1，措施数2....}}.....}}
     *
     * @param query
     * @return
     */
    private static HashMap<String, Object> formatDataTwo(OutBean query) {
        List<Bean> data = (List<Bean>) query.get("list");
        HashMap<Object, Object> map1 = new HashMap<>();
        HashMap<Object, Object> map22 = new HashMap<>();
        List<Object> list = new ArrayList<>();
        //处理重点工作
        for (int i = 0; i < data.size(); i++) {
            String MAJOR_WORK = (String) data.get(i).get("MAJOR_WORK");
            map1.put(MAJOR_WORK, "");
        }
        //处理单位
        for (int i = 0; i < data.size(); i++) {
            String PROVIN_NAME = (String) data.get(i).get("PROVIN_NAME");
            map22.put(PROVIN_NAME, "");
        }
        Set<Object> keys1 = map1.keySet();
        for (Object key1 : keys1) {
            list.add(key1);
        }
        Set<Object> keys22 = map22.keySet();
        List<Object> list1 = new ArrayList<>();
        //根据单位与重点工作对措施数进行处理
        for (Object key22 : keys22) {
            HashMap<Object, Object> map = new HashMap<>();
            List<Object> list111 = new ArrayList<>();
            for (int j = 1; j <= list.size(); j++) {
                for (int i = 0; i < data.size(); i++) {
                    if (StringUtils.equals(key22.toString(), data.get(i).get("PROVIN_NAME").toString()) &&
                            StringUtils.equals(list.get(j - 1).toString(), data.get(i).get("MAJOR_WORK").toString())) {
                        list111.add(data.get(i).get("FACT_OPERATE").toString());
                    } else {
                        if (i == (data.size() - 1) && list111.size() < j) {
                            list111.add("0");
                        }
                    }
                }
            }
            //将规整后的数据按一定的格式进行绑定
            map.put("PROVIN_NAME", key22);
            map.put("data", list111);
            list1.add(map);
        }
        HashMap<String, Object> hm = new HashMap<>();
        hm.put("MAJOR_WORK", list);
        hm.put("data", list1);
        return hm;
    }

    /**
     * 表十一/十二数据处理
     * 根据所需数据形式将数据处理成{重点工作，{{主要内容1,{数据1，数据2....}},{主要内容2,{数据1，数据2....}}...}}
     *
     * @param query
     * @return
     */
    private static HashMap<String, Object> formatDataThree(OutBean query, ParamBean paramBean) {
        String string2 = paramBean.get("type").toString();
        List<Bean> data = (List<Bean>) query.get("list");
        HashMap<Object, Object> map1 = new HashMap<>();
        List<Object> list = new ArrayList<>();
        //对主要内容进行去重
        for (int i = 0; i < data.size(); i++) {
            String MAJOR_WORK = (String) data.get(i).get("MAJOR_WORK");
            map1.put(MAJOR_WORK, "");
        }
        Set<Object> keys2;
        Set<Object> keys1 = map1.keySet();
        //处理主要内容
        for (Object key1 : keys1) {
            HashMap<Object, Object> map2 = new HashMap<>();
            List<Object> list2 = new ArrayList<>();
            for (int i = 0; i < data.size(); i++) {
                if (key1.toString().equals(data.get(i).get("MAJOR_WORK").toString())){
                    map2.put(data.get(i).get("MAJOR_CONTENT").toString(), "");
                }
            }
            //根据主要内容对数据进行特定格式的处理
            keys2 = map2.keySet();
            for (Object key2 : keys2) {
                List<Object> TARGET = new ArrayList<>();
                for (int i = 0; i < data.size(); i++) {
                    if (StringUtils.equals(key1.toString(), data.get(i).get("MAJOR_WORK").toString()) && StringUtils.equals(key2.toString(), data.get(i).get("MAJOR_CONTENT").toString())) {
                        HashMap<String, String> map3 = new HashMap<>();
                        if (StringUtils.equals("11", string2)) {
                            map3.put("TARGET3", data.get(i).get("TARGET3").toString());
                            map3.put("TARGET4", data.get(i).get("TARGET4").toString());
                        }
                        if (StringUtils.equals("12", string2)) {
                            map3.put("PROVIN_NAME", data.get(i).get("PROVIN_NAME").toString());
                            map3.put("LIABLE_OFFICE", data.get(i).get("LIABLE_OFFICE").toString());
                        }
                        map3.put("FACT_OPERATE", data.get(i).get("FACT_OPERATE").toString());
                        map3.put("SCHEDULE_PLAN", data.get(i).get("SCHEDULE_PLAN").toString());
                        map3.put("LIMIT_DATE", data.get(i).get("LIMIT_DATE").toString());
                        map3.put("LIABLE_OFFICE", data.get(i).get("LIABLE_OFFICE").toString());
                        map3.put("LIABLE_USER", data.get(i).get("LIABLE_USER").toString());
                        map3.put("CENTRALIED_MGR_BUREAU", data.get(i).get("CENTRALIED_MGR_BUREAU").toString());
                        TARGET.add(map3);
                    }
                }
                HashMap<Object, Object> ma2 = new HashMap<>();
                ma2.put("MAJOR_CONTENT", key2);
                ma2.put("data", TARGET);
                list2.add(ma2);
            }
            HashMap<Object, Object> ma1 = new HashMap<>();
            ma1.put("MAJOR_WORK", key1);
            ma1.put("data", list2);
            list.add(ma1);
        }
        String USER_CODE;
        String USER_TEL;
        String USER_PHONE;
        /*USER_CODE = "USER_CODE";
        USER_TEL = "USER_TEL";
        USER_PHONE = "USER_PHONE";*/
        if (null == data || data.size() <= 0) {
            USER_CODE = "----";
            USER_TEL = "----";
            USER_PHONE = "----";
        } else {
            USER_CODE = (String) data.get(0).get("USER_CODE");
            USER_TEL = (String) data.get(0).get("USER_TEL");
            USER_PHONE = (String) data.get(0).get("USER_PHONE");
        }
        //将处理后的数据进行规整并返回
        HashMap<String, Object> res = new HashMap<>();
        res.put("USER_CODE", USER_CODE);
        res.put("USER_TEL", USER_TEL);
        res.put("USER_PHONE", USER_PHONE);
        res.put("data", list);
        return res;
    }

    /**
     * 处理表八的数据
     * @return
     */
    private static  List<Bean> formatDateFourth(List<Bean> list,ParamBean paramBean){
        StringBuilder stringBuilder = null ;
        StringBuilder stringBuilder1 = null;
        StringBuilder stringBuilder2 = null;
        String yyyy = paramBean.getStr("selecttime").substring(0,4);
        //对数据进行遍历
        for (int i = 0 ; i < list.size() ; i++){
            //获取对应的阶段数据对数据进行判断并处理后绑定
            stringBuilder = new StringBuilder();
            stringBuilder.append("SELECT DISTINCT BEIGN_DATE,END_DATE,DETAIL_TEXT FROM SUP_APPRO_PLAN_CONTENT WHERE PLAN_ID IN \n" +
                    "(SELECT PLAN_ID FROM SUP_APPRO_PLAN WHERE APPRO_ID = '");
            stringBuilder.append(list.get(i).getStr("ID"));
            if ("署内".equals(paramBean.get("dw1").toString())) {
                stringBuilder.append("' AND DEPT_CODE = (SELECT DEPT_CODE FROM SUP_APPRO_OFFICE_DEPT WHERE OFFICE_ID = '");
            }else{
                stringBuilder.append("' AND DEPT_CODE = (SELECT DEPT_CODE FROM SUP_APPRO_BUREAU_STAFF WHERE BUREAU_ID = '");
            }
            stringBuilder.append(list.get(i).getStr("ID"));
            stringBuilder.append("'AND DEPT_TYPE = '1')) AND BEIGN_DATE LIKE '%" + yyyy + "%' AND END_DATE LIKE '%"+yyyy+"%'");
            stringBuilder.append(" AND S_ATIME BETWEEN '" + paramBean.getStr("selecttime") + "-01' AND '" + getFirstday_EndDate(paramBean.getStr("selecttime")) + "'");
            List<Bean> list1 = Transaction.getExecutor().query(stringBuilder.toString());
            for (int j = 0 ; j < list1.size() ; j++){
                Bean bean = list1.get(j);
                bean.set("BEIGN_DATE",bean.getStr("BEIGN_DATE").substring(5,7));
                bean.set("END_DATE",bean.getStr("END_DATE").substring(5,7));
            }
            list.get(i).set("AA",list1);
            //根据遍历的对象对其办理单位数据进行处理
            stringBuilder1 = new StringBuilder();
            if ("署内".equals(paramBean.get("dw1").toString())) {
                stringBuilder1.append("SELECT DISTINCT t1.DEPT_CODE,t2.DEPT_NAME,t1.DEPT_TYPE FROM SUP_APPRO_OFFICE_DEPT t1,SY_ORG_DEPT t2\n" +
                        "WHERE t1.OFFICE_ID = '" + list.get(i).getStr("ID") + "' AND t1.DEPT_CODE = t2.DEPT_CODE ");
            }else{
                stringBuilder1.append("SELECT DISTINCT t1.DEPT_CODE,t2.DEPT_NAME,t1.DEPT_TYPE FROM SUP_APPRO_BUREAU_STAFF t1,SY_ORG_DEPT t2\n" +
                        "WHERE t1.BUREAU_ID = '" + list.get(i).getStr("ID") + "' AND t1.DEPT_CODE = t2.DEPT_CODE ");
            }
            List<Bean> list2 = Transaction.getExecutor().query(stringBuilder1.toString());
            String str = "";
            for (int x = 0; x < list2.size() ; x++){
                Bean bean = list2.get(x);
                if (bean.getStr("DEPT_TYPE").equals("1")){
                    str = bean.getStr("DEPT_NAME") + "\n" + str;
                    stringBuilder2 = new StringBuilder();
                    stringBuilder2.append("SELECT DISTINCT CHARGE_NAME FROM SUP_APPRO_PLAN WHERE APPRO_ID = '"+ list.get(i).getStr("ID") +"' " +
                            "AND DEPT_CODE = '"+ paramBean.getStr("DEPT_CODE") +"'");
                    List<Bean> list3 = Transaction.getExecutor().query(stringBuilder2.toString());
                    if(list3.size()>0){
                        list.get(i).set("CHARGE_NAME",list3.get(0).getStr("CHARGE_NAME"));
                    }
                }else if (bean.getStr("DEPT_TYPE").equals("2")){
                    str += bean.getStr("DEPT_NAME") + "\n";
                }
            }
            list.get(i).set("DEPT_NAME",str);
        }
        return list;
    }

    /**
     * 根据领导code获取领导名字
     * @param Leader_name_code
     * @return
     */
    private static String getLeader_Name(String Leader_name_code){
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("SELECT LEADER_NAME FROM OA_GW_LEADER_DICTION_SHIP WHERE LEADER_USER_CODE = '"+Leader_name_code+"'");
        List<Bean> list = Transaction.getExecutor().query(stringBuilder.toString());
        if(list.size()<=0){
            return "";
        }else{
            return list.get(0).getStr("LEADER_NAME").toString();
        }

    }

    /**
     * 根据机构编码查询机构名字
     * @param paramBean
     * @return
     */
    private static ParamBean getDept_Name(ParamBean paramBean){
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("SELECT DEPT_NAME FROM SY_ORG_DEPT WHERE DEPT_CODE = '"+paramBean.getStr("jg1")+"'");
        List<Bean> list = Transaction.getExecutor().query(stringBuilder.toString());
        if(list.size()>0){
            paramBean.set("jg1",list.get(0).getStr("DEPT_NAME"));
        }
        return paramBean;
    }

}
